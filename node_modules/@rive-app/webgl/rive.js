(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["rive"] = factory();
	else
		root["rive"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Rive = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(Rive) {
  Rive = Rive || {};


null;var k;k||(k=typeof Rive !== 'undefined' ? Rive : {});var aa,ba;k.ready=new Promise(function(a,b){aa=a;ba=b});
function ca(){function a(e){const f=d;c=b=0;d=new Map;f.forEach(g=>{try{g(e)}catch(h){console.error(h)}});this.he()}let b=0,c=0,d=new Map;this.requestAnimationFrame=function(e){b||(b=window.requestAnimationFrame(a.bind(this)));const f=++c;d.set(f,e);return f};this.cancelAnimationFrame=function(e){d.delete(e);b&&0==d.size&&(window.cancelAnimationFrame(b),b=0)};this.he=function(){}}
function da(){console.assert(!0);const a=new Map;let b=-Infinity;this.push=function(c){c=c+255>>8;a.has(c)&&clearTimeout(a.get(c));a.set(c,setTimeout(function(){a.delete(c);0==a.length?b=-Infinity:c==b&&(b=Math.max(...a.keys()),console.assert(b<c))},1E3));b=Math.max(c,b);return b<<8}}
k.onRuntimeInitialized=function(){function a(u){this.od=u;this.le=u.getContext("2d");this.pe=e;this.td=[];this.Dd=0;this.clear=function(){console.assert(0==this.Dd);this.td=[];f.delete(this)};this.save=function(){++this.Dd;this.td.push(e.save.bind(e))};this.restore=function(){0<this.Dd&&(this.td.push(e.restore.bind(e)),--this.Dd)};this.transform=function(l){this.td.push(e.transform.bind(e,l))};this.align=function(l,t,v,z){this.td.push(e.align.bind(e,l,t,v,z))};this.computeAlignment=function(l,t,v,
z,E){this.td.push(e.computeAlignment.bind(e,l,t,v,z,E))};this.flush=function(){console.assert(0==this.Dd);f.add(this);d&&c()}}function b(u){var l={alpha:1,depth:0,stencil:8,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:0,renderViaOffscreenBackBuffer:0},t=u.getContext("webgl2",l);t||(t=u.getContext("webgl",l));var v=t,z=ea(fa),E={Re:z,attributes:l,version:l.Se,Td:v};v.canvas&&
(v.canvas.Pe=E);fa[z]=E;("undefined"===typeof l.ue||l.ue)&&ha(E);m=fa[z];k.re=r=m&&m.Td;l=g(u.width,u.height);l.ne=z;l.od=u;l.be=u.width;l.ae=u.height;l.me=t;return l}function c(){const u=e.oe;var l=0,t=0,v=0;const z=Array(f.size);var E=0;for(var A of f)A.zd=Math.min(A.od.width,u),A.yd=Math.min(A.od.height,u),A.Ud=A.yd*A.zd,l=Math.max(l,A.zd),t=Math.max(t,A.yd),v+=A.Ud,z[E++]=A;f.clear();if(!(0>=v)){l=1<<(0>=l?0:32-Math.clz32(l-1));for(t=1<<(0>=t?0:32-Math.clz32(t-1));t*l<v;)l<=t?l*=2:t*=2;l=Math.min(l,
u);l=Math.min(t,u);z.sort((X,mb)=>mb.Ud-X.Ud);v=new k.DynamicRectanizer(u);for(A=0;A<z.length;){v.reset(l,t);for(E=A;E<z.length;++E){var F=z[E],D=v.addRect(F.zd,F.yd);if(0>D){console.assert(E>A);break}F.Id=D&65535;F.Jd=D>>16}F=n.push(v.drawWidth());D=p.push(v.drawHeight());console.assert(F>=v.drawWidth());console.assert(D>=v.drawHeight());console.assert(F<=u);console.assert(D<=u);e.od.width!=F&&(e.od.width=F);e.od.height!=D&&(e.od.height=D);e.clear();for(F=A;F<E;++F){D=z[F];e.saveClipRect(D.Id,D.Jd,
D.Id+D.zd,D.Jd+D.yd);let X=new k.Mat2D;X.xx=D.zd/D.od.width;X.yy=D.yd/D.od.height;X.xy=X.yx=0;X.tx=D.Id;X.ty=D.Jd;e.transform(X);for(const mb of D.td)mb();e.restoreClipRect();D.td=[]}for(e.flush();A<E;++A)F=z[A],D=F.le,D.globalCompositeOperation="copy",D.drawImage(e.od,F.Id,F.Jd,F.zd,F.yd,0,0,F.od.width,F.od.height);A=E}}}const d=navigator.userAgent.match(/firefox|fxios/i);let e=null;const f=new Set,g=k.makeRenderer;k.makeRenderer=function(u,l){return l?(e||(e=b(document.createElement("canvas")),
l=e.me,e.oe=Math.min(l.getParameter(l.MAX_RENDERBUFFER_SIZE),l.getParameter(l.MAX_TEXTURE_SIZE))),new a(u)):b(u)};const h=k.Artboard.prototype.draw;k.Artboard.prototype.draw=function(u){u.td?u.td.push(h.bind(this,u.pe)):h.call(this,u)};const n=new da,p=new da,q=new ca;Rive.requestAnimationFrame=q.requestAnimationFrame.bind(q);Rive.cancelAnimationFrame=q.cancelAnimationFrame.bind(q);q.he=c;const x=k.WebGLRenderer.prototype.clear;k.WebGLRenderer.prototype.clear=function(){m=fa[this.ne];k.re=r=m&&m.Td;
const u=this.od;if(this.be!=u.width||this.ae!=u.height)this.resize(u.width,u.height),this.be=u.width,this.ae=u.height;x.call(this)}};var ia={},ja;for(ja in k)k.hasOwnProperty(ja)&&(ia[ja]=k[ja]);var ka="./this.program",la="object"===typeof window,ma="function"===typeof importScripts,na="object"===typeof process&&"object"===typeof process.versions&&"string"===typeof process.versions.node,w="",oa,pa,qa,ra,sa;
if(na)w=ma?require("path").dirname(w)+"/":__dirname+"/",oa=function(a,b){ra||(ra=require("fs"));sa||(sa=require("path"));a=sa.normalize(a);return ra.readFileSync(a,b?null:"utf8")},qa=function(a){a=oa(a,!0);a.buffer||(a=new Uint8Array(a));a.buffer||ta("Assertion failed: undefined");return a},pa=function(a,b,c){ra||(ra=require("fs"));sa||(sa=require("path"));a=sa.normalize(a);ra.readFile(a,function(d,e){d?c(d):b(e.buffer)})},1<process.argv.length&&(ka=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),
process.on("uncaughtException",function(a){throw a;}),process.on("unhandledRejection",function(a){throw a;}),k.inspect=function(){return"[Emscripten Module object]"};else if(la||ma)ma?w=self.location.href:"undefined"!==typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),0!==w.indexOf("blob:")?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",oa=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.send(null);return b.responseText},ma&&
(qa=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)}),pa=function(a,b,c){var d=new XMLHttpRequest;d.open("GET",a,!0);d.responseType="arraybuffer";d.onload=function(){200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ua=k.print||console.log.bind(console),va=k.printErr||console.warn.bind(console);for(ja in ia)ia.hasOwnProperty(ja)&&(k[ja]=ia[ja]);ia=null;k.thisProgram&&(ka=k.thisProgram);
var wa=0,xa;k.wasmBinary&&(xa=k.wasmBinary);var noExitRuntime=k.noExitRuntime||!0;"object"!==typeof WebAssembly&&ta("no native wasm support detected");var ya,za=!1,Aa="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;
function Ba(a,b,c){var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.subarray&&Aa)return Aa.decode(a.subarray(b,c));for(d="";b<c;){var e=a[b++];if(e&128){var f=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var g=a[b++]&63;e=224==(e&240)?(e&15)<<12|f<<6|g:(e&7)<<18|f<<12|g<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d}function Ca(a,b){return a?Ba(y,a,b):""}
function Da(a,b,c,d){if(!(0<d))return 0;var e=c;d=c+d-1;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);if(55296<=g&&57343>=g){var h=a.charCodeAt(++f);g=65536+((g&1023)<<10)|h&1023}if(127>=g){if(c>=d)break;b[c++]=g}else{if(2047>=g){if(c+1>=d)break;b[c++]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++]=224|g>>12}else{if(c+3>=d)break;b[c++]=240|g>>18;b[c++]=128|g>>12&63}b[c++]=128|g>>6&63}b[c++]=128|g&63}}b[c]=0;return c-e}
function Ea(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}var Fa="undefined"!==typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function Ga(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&Ha[c];)++c;c<<=1;if(32<c-a&&Fa)return Fa.decode(y.subarray(a,c));c="";for(d=0;!(d>=b/2);++d){var e=Ia[a+2*d>>1];if(0==e)break;c+=String.fromCharCode(e)}return c}
function Ja(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)Ia[b>>1]=a.charCodeAt(e),b+=2;Ia[b>>1]=0;return b-d}function Ka(a){return 2*a.length}function La(a,b){for(var c=0,d="";!(c>=b/4);){var e=B[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}
function Ma(a,b,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var g=a.charCodeAt(++e);f=65536+((f&1023)<<10)|g&1023}B[b>>2]=f;b+=4;if(b+4>c)break}B[b>>2]=0;return b-d}function Na(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var Oa,Pa,y,Ia,Ha,B,C,G,Qa;
function Ra(){var a=ya.buffer;Oa=a;k.HEAP8=Pa=new Int8Array(a);k.HEAP16=Ia=new Int16Array(a);k.HEAP32=B=new Int32Array(a);k.HEAPU8=y=new Uint8Array(a);k.HEAPU16=Ha=new Uint16Array(a);k.HEAPU32=C=new Uint32Array(a);k.HEAPF32=G=new Float32Array(a);k.HEAPF64=Qa=new Float64Array(a)}var Sa,Ta=[],Ua=[],Va=[];function Wa(){var a=k.preRun.shift();Ta.unshift(a)}var Xa=0,Ya=null,Za=null;k.preloadedImages={};k.preloadedAudios={};
function ta(a){if(k.onAbort)k.onAbort(a);a="Aborted("+a+")";va(a);za=!0;a=new WebAssembly.RuntimeError(a+". Build with -s ASSERTIONS=1 for more info.");ba(a);throw a;}function $a(){return H.startsWith("data:application/octet-stream;base64,")}var H;H="webgl_advanced.wasm";if(!$a()){var ab=H;H=k.locateFile?k.locateFile(ab,w):w+ab}function bb(){var a=H;try{if(a==H&&xa)return new Uint8Array(xa);if(qa)return qa(a);throw"both async and sync fetching of the wasm failed";}catch(b){ta(b)}}
function cb(){if(!xa&&(la||ma)){if("function"===typeof fetch&&!H.startsWith("file://"))return fetch(H,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+H+"'";return a.arrayBuffer()}).catch(function(){return bb()});if(pa)return new Promise(function(a,b){pa(H,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return bb()})}
function db(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b(k);else{var c=b.Qe;"number"===typeof c?void 0===b.Vd?I(c)():I(c)(b.Vd):c(void 0===b.Vd?null:b.Vd)}}}function I(a){return Sa.get(a)}var eb={};function fb(a){for(;a.length;){var b=a.pop();a.pop()(b)}}function gb(a){return this.fromWireType(C[a>>2])}var hb={},ib={},jb={};function kb(a){if(void 0===a)return"_unknown";a=a.replace(/[^a-zA-Z0-9_]/g,"$");var b=a.charCodeAt(0);return 48<=b&&57>=b?"_"+a:a}
function lb(a,b){a=kb(a);return(new Function("body","return function "+a+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n'))(b)}function nb(a){var b=Error,c=lb(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+"\n"+d.replace(/^Error(:[^\n]*)?\n/,""))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message};return c}
var ob=void 0;function pb(a){throw new ob(a);}function J(a,b,c){function d(h){h=c(h);h.length!==a.length&&pb("Mismatched type converter count");for(var n=0;n<a.length;++n)K(a[n],h[n])}a.forEach(function(h){jb[h]=b});var e=Array(b.length),f=[],g=0;b.forEach(function(h,n){ib.hasOwnProperty(h)?e[n]=ib[h]:(f.push(h),hb.hasOwnProperty(h)||(hb[h]=[]),hb[h].push(function(){e[n]=ib[h];++g;g===f.length&&d(e)}))});0===f.length&&d(e)}
function qb(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+a);}}var rb=void 0;function L(a){for(var b="";y[a];)b+=rb[y[a++]];return b}var sb=void 0;function M(a){throw new sb(a);}
function K(a,b,c){c=c||{};if(!("argPackAdvance"in b))throw new TypeError("registerType registeredInstance requires argPackAdvance");var d=b.name;a||M('type "'+d+'" must have a positive integer typeid pointer');if(ib.hasOwnProperty(a)){if(c.Be)return;M("Cannot register type '"+d+"' twice")}ib[a]=b;delete jb[a];hb.hasOwnProperty(a)&&(b=hb[a],delete hb[a],b.forEach(function(e){e()}))}function tb(a){M(a.jd.md.kd.name+" instance already deleted")}var ub=!1;function vb(){}
function wb(a){--a.count.value;0===a.count.value&&(a.qd?a.sd.vd(a.qd):a.md.kd.vd(a.ld))}function xb(a){if("undefined"===typeof FinalizationGroup)return xb=function(b){return b},a;ub=new FinalizationGroup(function(b){for(var c=b.next();!c.done;c=b.next())c=c.value,c.ld?wb(c):console.warn("object already deleted: "+c.ld)});xb=function(b){ub.register(b,b.jd,b.jd);return b};vb=function(b){ub.unregister(b.jd)};return xb(a)}var yb=void 0,zb=[];
function Ab(){for(;zb.length;){var a=zb.pop();a.jd.Bd=!1;a["delete"]()}}function Bb(){}var Cb={};function Db(a,b,c){if(void 0===a[b].nd){var d=a[b];a[b]=function(){a[b].nd.hasOwnProperty(arguments.length)||M("Function '"+c+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+a[b].nd+")!");return a[b].nd[arguments.length].apply(this,arguments)};a[b].nd=[];a[b].nd[d.Kd]=d}}
function Eb(a,b,c){k.hasOwnProperty(a)?((void 0===c||void 0!==k[a].nd&&void 0!==k[a].nd[c])&&M("Cannot register public name '"+a+"' twice"),Db(k,a,a),k.hasOwnProperty(c)&&M("Cannot register multiple overloads of a function with the same number of arguments ("+c+")!"),k[a].nd[c]=b):(k[a]=b,void 0!==c&&(k[a].Ue=c))}function Fb(a,b,c,d,e,f,g,h){this.name=a;this.constructor=b;this.wd=c;this.vd=d;this.ud=e;this.we=f;this.Hd=g;this.te=h;this.Fe=[]}
function Gb(a,b,c){for(;b!==c;)b.Hd||M("Expected null or instance of "+c.name+", got an instance of "+b.name),a=b.Hd(a),b=b.ud;return a}function Hb(a,b){if(null===b)return this.Xd&&M("null is not a valid "+this.name),0;b.jd||M('Cannot pass "'+Ib(b)+'" as a '+this.name);b.jd.ld||M("Cannot pass deleted object as a pointer of type "+this.name);return Gb(b.jd.ld,b.jd.md.kd,this.kd)}
function Jb(a,b){if(null===b){this.Xd&&M("null is not a valid "+this.name);if(this.Md){var c=this.Yd();null!==a&&a.push(this.vd,c);return c}return 0}b.jd||M('Cannot pass "'+Ib(b)+'" as a '+this.name);b.jd.ld||M("Cannot pass deleted object as a pointer of type "+this.name);!this.Ld&&b.jd.md.Ld&&M("Cannot convert argument of type "+(b.jd.sd?b.jd.sd.name:b.jd.md.name)+" to parameter type "+this.name);c=Gb(b.jd.ld,b.jd.md.kd,this.kd);if(this.Md)switch(void 0===b.jd.qd&&M("Passing raw pointer to smart pointer is illegal"),
this.Ke){case 0:b.jd.sd===this?c=b.jd.qd:M("Cannot convert argument of type "+(b.jd.sd?b.jd.sd.name:b.jd.md.name)+" to parameter type "+this.name);break;case 1:c=b.jd.qd;break;case 2:if(b.jd.sd===this)c=b.jd.qd;else{var d=b.clone();c=this.Ge(c,Kb(function(){d["delete"]()}));null!==a&&a.push(this.vd,c)}break;default:M("Unsupporting sharing policy")}return c}
function Lb(a,b){if(null===b)return this.Xd&&M("null is not a valid "+this.name),0;b.jd||M('Cannot pass "'+Ib(b)+'" as a '+this.name);b.jd.ld||M("Cannot pass deleted object as a pointer of type "+this.name);b.jd.md.Ld&&M("Cannot convert argument of type "+b.jd.md.name+" to parameter type "+this.name);return Gb(b.jd.ld,b.jd.md.kd,this.kd)}function Mb(a,b,c){if(b===c)return a;if(void 0===c.ud)return null;a=Mb(a,b,c.ud);return null===a?null:c.te(a)}var Nb={};
function Ob(a,b){for(void 0===b&&M("ptr should not be undefined");a.ud;)b=a.Hd(b),a=a.ud;return Nb[b]}function Pb(a,b){b.md&&b.ld||pb("makeClassHandle requires ptr and ptrType");!!b.sd!==!!b.qd&&pb("Both smartPtrType and smartPtr must be specified");b.count={value:1};return xb(Object.create(a,{jd:{value:b}}))}
function N(a,b,c,d){this.name=a;this.kd=b;this.Xd=c;this.Ld=d;this.Md=!1;this.vd=this.Ge=this.Yd=this.ie=this.Ke=this.Ee=void 0;void 0!==b.ud?this.toWireType=Jb:(this.toWireType=d?Hb:Lb,this.rd=null)}function Qb(a,b,c){k.hasOwnProperty(a)||pb("Replacing nonexistant public symbol");void 0!==k[a].nd&&void 0!==c?k[a].nd[c]=b:(k[a]=b,k[a].Kd=c)}
function Rb(a,b){var c=[];return function(){c.length=arguments.length;for(var d=0;d<arguments.length;d++)c[d]=arguments[d];a.includes("j")?(d=k["dynCall_"+a],d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)):d=I(b).apply(null,c);return d}}function O(a,b){a=L(a);var c=a.includes("j")?Rb(a,b):I(b);"function"!==typeof c&&M("unknown function pointer with signature "+a+": "+b);return c}var Sb=void 0;function Tb(a){a=Ub(a);var b=L(a);P(a);return b}
function Vb(a,b){function c(f){e[f]||ib[f]||(jb[f]?jb[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new Sb(a+": "+d.map(Tb).join([", "]));}function Wb(a,b,c){a instanceof Object||M(c+' with invalid "this": '+a);a instanceof b.kd.constructor||M(c+' incompatible with "this" of type '+a.constructor.name);a.jd.ld||M("cannot call emscripten binding method "+c+" on deleted object");return Gb(a.jd.ld,a.jd.md.kd,b.kd)}
function Xb(a,b){for(var c=[],d=0;d<a;d++)c.push(B[(b>>2)+d]);return c}function Yb(a){var b=Function;if(!(b instanceof Function))throw new TypeError("new_ called with constructor type "+typeof b+" which is not a function");var c=lb(b.name||"unknownFunctionName",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}
function Zb(a,b,c,d,e){var f=b.length;2>f&&M("argTypes array size mismatch! Must at least get return value and 'this' types!");var g=null!==b[1]&&null!==c,h=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].rd){h=!0;break}var n="void"!==b[0].name,p="",q="";for(c=0;c<f-2;++c)p+=(0!==c?", ":"")+"arg"+c,q+=(0!==c?", ":"")+"arg"+c+"Wired";a="return function "+kb(a)+"("+p+") {\nif (arguments.length !== "+(f-2)+") {\nthrowBindingError('function "+a+" called with ' + arguments.length + ' arguments, expected "+
(f-2)+" args!');\n}\n";h&&(a+="var destructors = [];\n");var x=h?"destructors":"null";p="throwBindingError invoker fn runDestructors retType classParam".split(" ");d=[M,d,e,fb,b[0],b[1]];g&&(a+="var thisWired = classParam.toWireType("+x+", this);\n");for(c=0;c<f-2;++c)a+="var arg"+c+"Wired = argType"+c+".toWireType("+x+", arg"+c+"); // "+b[c+2].name+"\n",p.push("argType"+c),d.push(b[c+2]);g&&(q="thisWired"+(0<q.length?", ":"")+q);a+=(n?"var rv = ":"")+"invoker(fn"+(0<q.length?", ":"")+q+");\n";if(h)a+=
"runDestructors(destructors);\n";else for(c=g?1:2;c<b.length;++c)f=1===c?"thisWired":"arg"+(c-2)+"Wired",null!==b[c].rd&&(a+=f+"_dtor("+f+"); // "+b[c].name+"\n",p.push(f+"_dtor"),d.push(b[c].rd));n&&(a+="var ret = retType.fromWireType(rv);\nreturn ret;\n");p.push(a+"}\n");return Yb(p).apply(null,d)}var $b=[],Q=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function ac(a){4<a&&0===--Q[a].Zd&&(Q[a]=void 0,$b.push(a))}
function bc(a){a||M("Cannot use deleted val. handle = "+a);return Q[a].value}function Kb(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=$b.length?$b.pop():Q.length;Q[b]={Zd:1,value:a};return b}}
function cc(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?Pa:y)[d])};case 1:return function(d){return this.fromWireType((c?Ia:Ha)[d>>1])};case 2:return function(d){return this.fromWireType((c?B:C)[d>>2])};default:throw new TypeError("Unknown integer type: "+a);}}function dc(a,b){var c=ib[a];void 0===c&&M(b+" has unknown type "+Tb(a));return c}function Ib(a){if(null===a)return"null";var b=typeof a;return"object"===b||"array"===b||"function"===b?a.toString():""+a}
function ec(a,b){switch(b){case 2:return function(c){return this.fromWireType(G[c>>2])};case 3:return function(c){return this.fromWireType(Qa[c>>3])};default:throw new TypeError("Unknown float type: "+a);}}
function fc(a,b,c){switch(b){case 0:return c?function(d){return Pa[d]}:function(d){return y[d]};case 1:return c?function(d){return Ia[d>>1]}:function(d){return Ha[d>>1]};case 2:return c?function(d){return B[d>>2]}:function(d){return C[d>>2]};default:throw new TypeError("Unknown integer type: "+a);}}var gc={};function hc(a){var b=gc[a];return void 0===b?L(a):b}var ic=[];function jc(a){var b=ic.length;ic.push(a);return b}
function kc(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=dc(B[(b>>2)+d],"parameter "+d);return c}var lc=[],mc;mc=na?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:function(){return performance.now()};
function nc(a){var b=a.getExtension("ANGLE_instanced_arrays");b&&(a.vertexAttribDivisor=function(c,d){b.vertexAttribDivisorANGLE(c,d)},a.drawArraysInstanced=function(c,d,e,f){b.drawArraysInstancedANGLE(c,d,e,f)},a.drawElementsInstanced=function(c,d,e,f,g){b.drawElementsInstancedANGLE(c,d,e,f,g)})}
function oc(a){var b=a.getExtension("OES_vertex_array_object");b&&(a.createVertexArray=function(){return b.createVertexArrayOES()},a.deleteVertexArray=function(c){b.deleteVertexArrayOES(c)},a.bindVertexArray=function(c){b.bindVertexArrayOES(c)},a.isVertexArray=function(c){return b.isVertexArrayOES(c)})}function pc(a){var b=a.getExtension("WEBGL_draw_buffers");b&&(a.drawBuffers=function(c,d){b.drawBuffersWEBGL(c,d)})}
var qc=1,rc=[],R=[],sc=[],tc=[],uc=[],S=[],vc=[],fa=[],wc=[],xc=[],yc={},zc={},Ac=4;function T(a){Bc||(Bc=a)}function ea(a){for(var b=qc++,c=a.length;c<b;c++)a[c]=null;return b}
function ha(a){a||(a=m);if(!a.Ce){a.Ce=!0;var b=a.Td;nc(b);oc(b);pc(b);b.de=b.getExtension("WEBGL_draw_instanced_base_vertex_base_instance");b.ge=b.getExtension("WEBGL_multi_draw_instanced_base_vertex_base_instance");2<=a.version&&(b.ee=b.getExtension("EXT_disjoint_timer_query_webgl2"));if(2>a.version||!b.ee)b.ee=b.getExtension("EXT_disjoint_timer_query");b.Te=b.getExtension("WEBGL_multi_draw");(b.getSupportedExtensions()||[]).forEach(function(c){c.includes("lose_context")||c.includes("debug")||b.getExtension(c)})}}
var Bc,m,Cc=[];function Dc(a,b,c,d){for(var e=0;e<a;e++){var f=r[c](),g=f&&ea(d);f?(f.name=g,d[g]=f):T(1282);B[b+4*e>>2]=g}}
function Ec(a,b){if(b){var c=void 0;switch(a){case 36346:c=1;break;case 36344:return;case 34814:case 36345:c=0;break;case 34466:var d=r.getParameter(34467);c=d?d.length:0;break;case 33309:if(2>m.version){T(1282);return}c=2*(r.getSupportedExtensions()||[]).length;break;case 33307:case 33308:if(2>m.version){T(1280);return}c=33307==a?3:0}if(void 0===c)switch(d=r.getParameter(a),typeof d){case "number":c=d;break;case "boolean":c=d?1:0;break;case "string":T(1280);return;case "object":if(null===d)switch(a){case 34964:case 35725:case 34965:case 36006:case 36007:case 32873:case 34229:case 36662:case 36663:case 35053:case 35055:case 36010:case 35097:case 35869:case 32874:case 36389:case 35983:case 35368:case 34068:c=
0;break;default:T(1280);return}else{if(d instanceof Float32Array||d instanceof Uint32Array||d instanceof Int32Array||d instanceof Array){for(a=0;a<d.length;++a)B[b+4*a>>2]=d[a];return}try{c=d.name|0}catch(e){T(1280);va("GL_INVALID_ENUM in glGet0v: Unknown object returned from WebGL getParameter("+a+")! (error: "+e+")");return}}break;default:T(1280);va("GL_INVALID_ENUM in glGet0v: Native code calling glGet0v("+a+") and it returns "+d+" of type "+typeof d+"!");return}B[b>>2]=c}else T(1281)}
function Fc(a){var b=Ea(a)+1,c=Gc(b);Da(a,y,c,b);return c}function Hc(a){return"]"==a.slice(-1)&&a.lastIndexOf("[")}function Ic(a){a-=5120;return 0==a?Pa:1==a?y:2==a?Ia:4==a?B:6==a?G:5==a||28922==a||28520==a||30779==a||30782==a?C:Ha}function Jc(a,b,c,d,e){a=Ic(a);var f=31-Math.clz32(a.BYTES_PER_ELEMENT),g=Ac;return a.subarray(e>>f,e+d*(c*({5:3,6:4,8:2,29502:3,29504:4,26917:2,26918:2,29846:3,29847:4}[b-6402]||1)*(1<<f)+g-1&-g)>>f)}
function U(a){var b=r.se;if(b){var c=b.Gd[a];"number"===typeof c&&(b.Gd[a]=c=r.getUniformLocation(b,b.je[a]+(0<c?"["+c+"]":"")));return c}T(1282)}var Kc=[],Lc=[],Mc={};
function Nc(){if(!Oc){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"===typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:ka||"./this.program"},b;for(b in Mc)void 0===Mc[b]?delete a[b]:a[b]=Mc[b];var c=[];for(b in a)c.push(b+"="+a[b]);Oc=c}return Oc}var Oc,Pc=[null,[],[]];function Qc(a){return 0===a%4&&(0!==a%100||0===a%400)}function Rc(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}
var Sc=[31,29,31,30,31,30,31,31,30,31,30,31],Tc=[31,28,31,30,31,30,31,31,30,31,30,31];function Uc(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(Qc(a.getFullYear())?Sc:Tc)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}
function Vc(a,b,c,d){function e(l,t,v){for(l="number"===typeof l?l.toString():l||"";l.length<t;)l=v[0]+l;return l}function f(l,t){return e(l,t,"0")}function g(l,t){function v(E){return 0>E?-1:0<E?1:0}var z;0===(z=v(l.getFullYear()-t.getFullYear()))&&0===(z=v(l.getMonth()-t.getMonth()))&&(z=v(l.getDate()-t.getDate()));return z}function h(l){switch(l.getDay()){case 0:return new Date(l.getFullYear()-1,11,29);case 1:return l;case 2:return new Date(l.getFullYear(),0,3);case 3:return new Date(l.getFullYear(),
0,2);case 4:return new Date(l.getFullYear(),0,1);case 5:return new Date(l.getFullYear()-1,11,31);case 6:return new Date(l.getFullYear()-1,11,30)}}function n(l){l=Uc(new Date(l.pd+1900,0,1),l.Sd);var t=new Date(l.getFullYear()+1,0,4),v=h(new Date(l.getFullYear(),0,4));t=h(t);return 0>=g(v,l)?0>=g(t,l)?l.getFullYear()+1:l.getFullYear():l.getFullYear()-1}var p=B[d+40>>2];d={Ne:B[d>>2],Me:B[d+4>>2],Qd:B[d+8>>2],Fd:B[d+12>>2],Cd:B[d+16>>2],pd:B[d+20>>2],Rd:B[d+24>>2],Sd:B[d+28>>2],Ve:B[d+32>>2],Le:B[d+
36>>2],Oe:p?Ca(p):""};c=Ca(c);p={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var q in p)c=c.replace(new RegExp(q,"g"),p[q]);var x="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
u="January February March April May June July August September October November December".split(" ");p={"%a":function(l){return x[l.Rd].substring(0,3)},"%A":function(l){return x[l.Rd]},"%b":function(l){return u[l.Cd].substring(0,3)},"%B":function(l){return u[l.Cd]},"%C":function(l){return f((l.pd+1900)/100|0,2)},"%d":function(l){return f(l.Fd,2)},"%e":function(l){return e(l.Fd,2," ")},"%g":function(l){return n(l).toString().substring(2)},"%G":function(l){return n(l)},"%H":function(l){return f(l.Qd,
2)},"%I":function(l){l=l.Qd;0==l?l=12:12<l&&(l-=12);return f(l,2)},"%j":function(l){return f(l.Fd+Rc(Qc(l.pd+1900)?Sc:Tc,l.Cd-1),3)},"%m":function(l){return f(l.Cd+1,2)},"%M":function(l){return f(l.Me,2)},"%n":function(){return"\n"},"%p":function(l){return 0<=l.Qd&&12>l.Qd?"AM":"PM"},"%S":function(l){return f(l.Ne,2)},"%t":function(){return"\t"},"%u":function(l){return l.Rd||7},"%U":function(l){var t=new Date(l.pd+1900,0,1),v=0===t.getDay()?t:Uc(t,7-t.getDay());l=new Date(l.pd+1900,l.Cd,l.Fd);return 0>
g(v,l)?f(Math.ceil((31-v.getDate()+(Rc(Qc(l.getFullYear())?Sc:Tc,l.getMonth()-1)-31)+l.getDate())/7),2):0===g(v,t)?"01":"00"},"%V":function(l){var t=new Date(l.pd+1901,0,4),v=h(new Date(l.pd+1900,0,4));t=h(t);var z=Uc(new Date(l.pd+1900,0,1),l.Sd);return 0>g(z,v)?"53":0>=g(t,z)?"01":f(Math.ceil((v.getFullYear()<l.pd+1900?l.Sd+32-v.getDate():l.Sd+1-v.getDate())/7),2)},"%w":function(l){return l.Rd},"%W":function(l){var t=new Date(l.pd,0,1),v=1===t.getDay()?t:Uc(t,0===t.getDay()?1:7-t.getDay()+1);l=
new Date(l.pd+1900,l.Cd,l.Fd);return 0>g(v,l)?f(Math.ceil((31-v.getDate()+(Rc(Qc(l.getFullYear())?Sc:Tc,l.getMonth()-1)-31)+l.getDate())/7),2):0===g(v,t)?"01":"00"},"%y":function(l){return(l.pd+1900).toString().substring(2)},"%Y":function(l){return l.pd+1900},"%z":function(l){l=l.Le;var t=0<=l;l=Math.abs(l)/60;return(t?"+":"-")+String("0000"+(l/60*100+l%60)).slice(-4)},"%Z":function(l){return l.Oe},"%%":function(){return"%"}};for(q in p)c.includes(q)&&(c=c.replace(new RegExp(q,"g"),p[q](d)));q=Wc(c);
if(q.length>b)return 0;Pa.set(q,a);return q.length-1}ob=k.InternalError=nb("InternalError");for(var Xc=Array(256),Yc=0;256>Yc;++Yc)Xc[Yc]=String.fromCharCode(Yc);rb=Xc;sb=k.BindingError=nb("BindingError");Bb.prototype.isAliasOf=function(a){if(!(this instanceof Bb&&a instanceof Bb))return!1;var b=this.jd.md.kd,c=this.jd.ld,d=a.jd.md.kd;for(a=a.jd.ld;b.ud;)c=b.Hd(c),b=b.ud;for(;d.ud;)a=d.Hd(a),d=d.ud;return b===d&&c===a};
Bb.prototype.clone=function(){this.jd.ld||tb(this);if(this.jd.Ed)return this.jd.count.value+=1,this;var a=xb,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.jd;a=a(c.call(b,d,{jd:{value:{count:e.count,Bd:e.Bd,Ed:e.Ed,ld:e.ld,md:e.md,qd:e.qd,sd:e.sd}}}));a.jd.count.value+=1;a.jd.Bd=!1;return a};Bb.prototype["delete"]=function(){this.jd.ld||tb(this);this.jd.Bd&&!this.jd.Ed&&M("Object already scheduled for deletion");vb(this);wb(this.jd);this.jd.Ed||(this.jd.qd=void 0,this.jd.ld=void 0)};
Bb.prototype.isDeleted=function(){return!this.jd.ld};Bb.prototype.deleteLater=function(){this.jd.ld||tb(this);this.jd.Bd&&!this.jd.Ed&&M("Object already scheduled for deletion");zb.push(this);1===zb.length&&yb&&yb(Ab);this.jd.Bd=!0;return this};N.prototype.xe=function(a){this.ie&&(a=this.ie(a));return a};N.prototype.ce=function(a){this.vd&&this.vd(a)};N.prototype.argPackAdvance=8;N.prototype.readValueFromPointer=gb;N.prototype.deleteObject=function(a){if(null!==a)a["delete"]()};
N.prototype.fromWireType=function(a){function b(){return this.Md?Pb(this.kd.wd,{md:this.Ee,ld:c,sd:this,qd:a}):Pb(this.kd.wd,{md:this,ld:a})}var c=this.xe(a);if(!c)return this.ce(a),null;var d=Ob(this.kd,c);if(void 0!==d){if(0===d.jd.count.value)return d.jd.ld=c,d.jd.qd=a,d.clone();d=d.clone();this.ce(a);return d}d=this.kd.we(c);d=Cb[d];if(!d)return b.call(this);d=this.Ld?d.qe:d.pointerType;var e=Mb(c,this.kd,d.kd);return null===e?b.call(this):this.Md?Pb(d.kd.wd,{md:d,ld:e,sd:this,qd:a}):Pb(d.kd.wd,
{md:d,ld:e})};k.getInheritedInstanceCount=function(){return Object.keys(Nb).length};k.getLiveInheritedInstances=function(){var a=[],b;for(b in Nb)Nb.hasOwnProperty(b)&&a.push(Nb[b]);return a};k.flushPendingDeletes=Ab;k.setDelayFunction=function(a){yb=a;zb.length&&yb&&yb(Ab)};Sb=k.UnboundTypeError=nb("UnboundTypeError");k.count_emval_handles=function(){for(var a=0,b=5;b<Q.length;++b)void 0!==Q[b]&&++a;return a};k.get_first_emval=function(){for(var a=5;a<Q.length;++a)if(void 0!==Q[a])return Q[a];return null};
for(var r,V=0;32>V;++V)Cc.push(Array(V));var Zc=new Float32Array(288);for(V=0;288>V;++V)Kc[V]=Zc.subarray(0,V+1);var $c=new Int32Array(288);for(V=0;288>V;++V)Lc[V]=$c.subarray(0,V+1);function Wc(a){var b=Array(Ea(a)+1);Da(a,b,0,b.length);return b}
var qd={bb:function(a){var b=eb[a];delete eb[a];var c=b.Yd,d=b.vd,e=b.fe,f=e.map(function(g){return g.Ae}).concat(e.map(function(g){return g.Ie}));J([a],f,function(g){var h={};e.forEach(function(n,p){var q=g[p],x=n.ye,u=n.ze,l=g[p+e.length],t=n.He,v=n.Je;h[n.ve]={read:function(z){return q.fromWireType(x(u,z))},write:function(z,E){var A=[];t(v,z,l.toWireType(A,E));fb(A)}}});return[{name:b.name,fromWireType:function(n){var p={},q;for(q in h)p[q]=h[q].read(n);d(n);return p},toWireType:function(n,p){for(var q in h)if(!(q in
p))throw new TypeError('Missing field:  "'+q+'"');var x=c();for(q in h)h[q].write(x,p[q]);null!==n&&n.push(d,x);return x},argPackAdvance:8,readValueFromPointer:gb,rd:d}]})},fb:function(){},vb:function(a,b,c,d,e){var f=qb(c);b=L(b);K(a,{name:b,fromWireType:function(g){return!!g},toWireType:function(g,h){return h?d:e},argPackAdvance:8,readValueFromPointer:function(g){if(1===c)var h=Pa;else if(2===c)h=Ia;else if(4===c)h=B;else throw new TypeError("Unknown boolean type size: "+b);return this.fromWireType(h[g>>
f])},rd:null})},g:function(a,b,c,d,e,f,g,h,n,p,q,x,u){q=L(q);f=O(e,f);h&&(h=O(g,h));p&&(p=O(n,p));u=O(x,u);var l=kb(q);Eb(l,function(){Vb("Cannot construct "+q+" due to unbound types",[d])});J([a,b,c],d?[d]:[],function(t){t=t[0];if(d){var v=t.kd;var z=v.wd}else z=Bb.prototype;t=lb(l,function(){if(Object.getPrototypeOf(this)!==E)throw new sb("Use 'new' to construct "+q);if(void 0===A.xd)throw new sb(q+" has no accessible constructor");var D=A.xd[arguments.length];if(void 0===D)throw new sb("Tried to invoke ctor of "+
q+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(A.xd).toString()+") parameters instead!");return D.apply(this,arguments)});var E=Object.create(z,{constructor:{value:t}});t.prototype=E;var A=new Fb(q,t,E,u,v,f,h,p);v=new N(q,A,!0,!1);z=new N(q+"*",A,!1,!1);var F=new N(q+" const*",A,!1,!0);Cb[a]={pointerType:z,qe:F};Qb(l,t);return[v,z,F]})},k:function(a,b,c,d,e,f,g,h){b=L(b);f=O(e,f);J([],[a],function(n){n=n[0];var p=n.name+"."+b,q={get:function(){Vb("Cannot access "+
p+" due to unbound types",[c])},enumerable:!0,configurable:!0};q.set=h?function(){Vb("Cannot access "+p+" due to unbound types",[c])}:function(){M(p+" is a read-only property")};Object.defineProperty(n.kd.constructor,b,q);J([],[c],function(x){x=x[0];var u={get:function(){return x.fromWireType(f(d))},enumerable:!0};h&&(h=O(g,h),u.set=function(l){var t=[];h(d,x.toWireType(t,l));fb(t)});Object.defineProperty(n.kd.constructor,b,u);return[]});return[]})},s:function(a,b,c,d,e,f){0<b||ta("Assertion failed: undefined");
var g=Xb(b,c);e=O(d,e);J([],[a],function(h){h=h[0];var n="constructor "+h.name;void 0===h.kd.xd&&(h.kd.xd=[]);if(void 0!==h.kd.xd[b-1])throw new sb("Cannot register multiple constructors with identical number of parameters ("+(b-1)+") for class '"+h.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");h.kd.xd[b-1]=function(){Vb("Cannot construct "+h.name+" due to unbound types",g)};J([],g,function(p){p.splice(1,0,null);h.kd.xd[b-1]=Zb(n,p,null,
e,f);return[]});return[]})},e:function(a,b,c,d,e,f,g,h){var n=Xb(c,d);b=L(b);f=O(e,f);J([],[a],function(p){function q(){Vb("Cannot call "+x+" due to unbound types",n)}p=p[0];var x=p.name+"."+b;b.startsWith("@@")&&(b=Symbol[b.substring(2)]);h&&p.kd.Fe.push(b);var u=p.kd.wd,l=u[b];void 0===l||void 0===l.nd&&l.className!==p.name&&l.Kd===c-2?(q.Kd=c-2,q.className=p.name,u[b]=q):(Db(u,b,x),u[b].nd[c-2]=q);J([],n,function(t){t=Zb(x,t,p,f,g);void 0===u[b].nd?(t.Kd=c-2,u[b]=t):u[b].nd[c-2]=t;return[]});return[]})},
f:function(a,b,c,d,e,f,g,h,n,p){b=L(b);e=O(d,e);J([],[a],function(q){q=q[0];var x=q.name+"."+b,u={get:function(){Vb("Cannot access "+x+" due to unbound types",[c,g])},enumerable:!0,configurable:!0};u.set=n?function(){Vb("Cannot access "+x+" due to unbound types",[c,g])}:function(){M(x+" is a read-only property")};Object.defineProperty(q.kd.wd,b,u);J([],n?[c,g]:[c],function(l){var t=l[0],v={get:function(){var E=Wb(this,q,x+" getter");return t.fromWireType(e(f,E))},enumerable:!0};if(n){n=O(h,n);var z=
l[1];v.set=function(E){var A=Wb(this,q,x+" setter"),F=[];n(p,A,z.toWireType(F,E));fb(F)}}Object.defineProperty(q.kd.wd,b,v);return[]});return[]})},ub:function(a,b){b=L(b);K(a,{name:b,fromWireType:function(c){var d=bc(c);ac(c);return d},toWireType:function(c,d){return Kb(d)},argPackAdvance:8,readValueFromPointer:gb,rd:null})},mb:function(a,b,c,d){function e(){}c=qb(c);b=L(b);e.values={};K(a,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,g){return g.value},
argPackAdvance:8,readValueFromPointer:cc(b,c,d),rd:null});Eb(b,e)},jb:function(a,b,c){var d=dc(a,"enum");b=L(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:lb(d.name+"_"+b,function(){})}});a.values[c]=d;a[b]=d},x:function(a,b,c){c=qb(c);b=L(b);K(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:ec(b,c),rd:null})},z:function(a,b,c,d,e,f){var g=Xb(b,c);a=L(a);e=O(d,e);Eb(a,function(){Vb("Cannot call "+
a+" due to unbound types",g)},b-1);J([],g,function(h){h=[h[0],null].concat(h.slice(1));Qb(a,Zb(a,h,null,e,f),b-1);return[]})},m:function(a,b,c,d,e){function f(p){return p}b=L(b);-1===e&&(e=4294967295);var g=qb(c);if(0===d){var h=32-8*c;f=function(p){return p<<h>>>h}}var n=b.includes("unsigned");K(a,{name:b,fromWireType:f,toWireType:function(p,q){if("number"!==typeof q&&"boolean"!==typeof q)throw new TypeError('Cannot convert "'+Ib(q)+'" to '+this.name);if(q<d||q>e)throw new TypeError('Passing a number "'+
Ib(q)+'" from JS side to C/C++ side to an argument of type "'+b+'", which is outside the valid range ['+d+", "+e+"]!");return n?q>>>0:q|0},argPackAdvance:8,readValueFromPointer:fc(b,g,0!==d),rd:null})},l:function(a,b,c){function d(f){f>>=2;var g=C;return new e(Oa,g[f+1],g[f])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=L(c);K(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Be:!0})},y:function(a,b){b=L(b);var c="std::string"===
b;K(a,{name:b,fromWireType:function(d){var e=C[d>>2];if(c)for(var f=d+4,g=0;g<=e;++g){var h=d+4+g;if(g==e||0==y[h]){f=Ca(f,h-f);if(void 0===n)var n=f;else n+=String.fromCharCode(0),n+=f;f=h+1}}else{n=Array(e);for(g=0;g<e;++g)n[g]=String.fromCharCode(y[d+4+g]);n=n.join("")}P(d);return n},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f="string"===typeof e;f||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||M("Cannot pass non-string to std::string");
var g=(c&&f?function(){return Ea(e)}:function(){return e.length})(),h=Gc(4+g+1);C[h>>2]=g;if(c&&f)Da(e,y,h+4,g+1);else if(f)for(f=0;f<g;++f){var n=e.charCodeAt(f);255<n&&(P(h),M("String has UTF-16 code units that do not fit in 8 bits"));y[h+4+f]=n}else for(f=0;f<g;++f)y[h+4+f]=e[f];null!==d&&d.push(P,h);return h},argPackAdvance:8,readValueFromPointer:gb,rd:function(d){P(d)}})},v:function(a,b,c){c=L(c);if(2===b){var d=Ga;var e=Ja;var f=Ka;var g=function(){return Ha};var h=1}else 4===b&&(d=La,e=Ma,
f=Na,g=function(){return C},h=2);K(a,{name:c,fromWireType:function(n){for(var p=C[n>>2],q=g(),x,u=n+4,l=0;l<=p;++l){var t=n+4+l*b;if(l==p||0==q[t>>h])u=d(u,t-u),void 0===x?x=u:(x+=String.fromCharCode(0),x+=u),u=t+b}P(n);return x},toWireType:function(n,p){"string"!==typeof p&&M("Cannot pass non-string to C++ string type "+c);var q=f(p),x=Gc(4+q+b);C[x>>2]=q>>h;e(p,x+4,q+b);null!==n&&n.push(P,x);return x},argPackAdvance:8,readValueFromPointer:gb,rd:function(n){P(n)}})},cb:function(a,b,c,d,e,f){eb[a]=
{name:L(b),Yd:O(c,d),vd:O(e,f),fe:[]}},ab:function(a,b,c,d,e,f,g,h,n,p){eb[a].fe.push({ve:L(b),Ae:c,ye:O(d,e),ze:f,Ie:g,He:O(h,n),Je:p})},wb:function(a,b){b=L(b);K(a,{De:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},nb:function(){throw"longjmp";},pa:function(a,b,c){a=bc(a);b=dc(b,"emval::as");var d=[],e=Kb(d);B[c>>2]=e;return b.toWireType(d,a)},K:function(a,b,c,d){a=ic[a];b=bc(b);c=hc(c);a(b,c,null,d)},Gc:ac,Fc:function(a,b){var c=kc(a,b),d=c[0];b=d.name+"_$"+c.slice(1).map(function(q){return q.name}).join("_")+
"$";var e=lc[b];if(void 0!==e)return e;e=["retType"];for(var f=[d],g="",h=0;h<a-1;++h)g+=(0!==h?", ":"")+"arg"+h,e.push("argType"+h),f.push(c[1+h]);var n="return function "+kb("methodCaller_"+b)+"(handle, name, destructors, args) {\n",p=0;for(h=0;h<a-1;++h)n+="    var arg"+h+" = argType"+h+".readValueFromPointer(args"+(p?"+"+p:"")+");\n",p+=c[h+1].argPackAdvance;n+="    var rv = handle[name]("+g+");\n";for(h=0;h<a-1;++h)c[h+1].deleteObject&&(n+="    argType"+h+".deleteObject(arg"+h+");\n");d.De||
(n+="    return retType.toWireType(destructors, rv);\n");e.push(n+"};\n");a=Yb(e).apply(null,f);e=jc(a);return lc[b]=e},La:function(a,b){a=bc(a);b=bc(b);return Kb(a[b])},uc:function(a){4<a&&(Q[a].Zd+=1)},Aa:function(a){return Kb(hc(a))},ea:function(a){var b=bc(a);fb(b);ac(a)},V:function(a,b){a=dc(a,"_emval_take_value");a=a.readValueFromPointer(b);return Kb(a)},a:function(){ta("")},pb:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=mc();else return B[ad()>>2]=28,-1;B[b>>2]=a/1E3|0;B[b+4>>
2]=a%1E3*1E6|0;return 0},Xa:function(a){r.activeTexture(a)},Wa:function(a,b){r.attachShader(R[a],S[b])},Va:function(a,b,c){r.bindAttribLocation(R[a],b,Ca(c))},Ua:function(a,b){35051==a?r.Wd=b:35052==a&&(r.Ad=b);r.bindBuffer(a,rc[b])},Wb:function(a,b){r.bindFramebuffer(a,sc[b])},Vb:function(a,b){r.bindRenderbuffer(a,tc[b])},Eb:function(a,b){r.bindSampler(a,wc[b])},Ta:function(a,b){r.bindTexture(a,uc[b])},mc:function(a){r.bindVertexArray(vc[a])},jc:function(a){r.bindVertexArray(vc[a])},Sa:function(a,
b,c,d){r.blendColor(a,b,c,d)},Ra:function(a){r.blendEquation(a)},Qa:function(a,b){r.blendFunc(a,b)},Jb:function(a,b,c,d,e,f,g,h,n,p){r.blitFramebuffer(a,b,c,d,e,f,g,h,n,p)},Pa:function(a,b,c,d){2<=m.version?c?r.bufferData(a,y,d,c,b):r.bufferData(a,b,d):r.bufferData(a,c?y.subarray(c,c+b):b,d)},Oa:function(a,b,c,d){2<=m.version?r.bufferSubData(a,b,y,d,c):r.bufferSubData(a,b,y.subarray(d,d+c))},Ub:function(a){return r.checkFramebufferStatus(a)},Na:function(a){r.clear(a)},Ma:function(a,b,c,d){r.clearColor(a,
b,c,d)},Ka:function(a){r.clearStencil(a)},_a:function(a,b,c,d){return r.clientWaitSync(xc[a],b,(c>>>0)+4294967296*d)},Ja:function(a,b,c,d){r.colorMask(!!a,!!b,!!c,!!d)},Ia:function(a){r.compileShader(S[a])},Ha:function(a,b,c,d,e,f,g,h){2<=m.version?r.Ad?r.compressedTexImage2D(a,b,c,d,e,f,g,h):r.compressedTexImage2D(a,b,c,d,e,f,y,h,g):r.compressedTexImage2D(a,b,c,d,e,f,h?y.subarray(h,h+g):null)},Ga:function(a,b,c,d,e,f,g,h,n){2<=m.version?r.Ad?r.compressedTexSubImage2D(a,b,c,d,e,f,g,h,n):r.compressedTexSubImage2D(a,
b,c,d,e,f,g,y,n,h):r.compressedTexSubImage2D(a,b,c,d,e,f,g,n?y.subarray(n,n+h):null)},Fa:function(a,b,c,d,e,f,g,h){r.copyTexSubImage2D(a,b,c,d,e,f,g,h)},Ea:function(){var a=ea(R),b=r.createProgram();b.name=a;b.Pd=b.Nd=b.Od=0;b.$d=1;R[a]=b;return a},Da:function(a){var b=ea(S);S[b]=r.createShader(a);return b},Ca:function(a){r.cullFace(a)},Ba:function(a,b){for(var c=0;c<a;c++){var d=B[b+4*c>>2],e=rc[d];e&&(r.deleteBuffer(e),e.name=0,rc[d]=null,d==r.Wd&&(r.Wd=0),d==r.Ad&&(r.Ad=0))}},Tb:function(a,b){for(var c=
0;c<a;++c){var d=B[b+4*c>>2],e=sc[d];e&&(r.deleteFramebuffer(e),e.name=0,sc[d]=null)}},za:function(a){if(a){var b=R[a];b?(r.deleteProgram(b),b.name=0,R[a]=null):T(1281)}},Sb:function(a,b){for(var c=0;c<a;c++){var d=B[b+4*c>>2],e=tc[d];e&&(r.deleteRenderbuffer(e),e.name=0,tc[d]=null)}},Db:function(a,b){for(var c=0;c<a;c++){var d=B[b+4*c>>2],e=wc[d];e&&(r.deleteSampler(e),e.name=0,wc[d]=null)}},ya:function(a){if(a){var b=S[a];b?(r.deleteShader(b),S[a]=null):T(1281)}},Hb:function(a){if(a){var b=xc[a];
b?(r.deleteSync(b),b.name=0,xc[a]=null):T(1281)}},xa:function(a,b){for(var c=0;c<a;c++){var d=B[b+4*c>>2],e=uc[d];e&&(r.deleteTexture(e),e.name=0,uc[d]=null)}},lc:function(a,b){for(var c=0;c<a;c++){var d=B[b+4*c>>2];r.deleteVertexArray(vc[d]);vc[d]=null}},ic:function(a,b){for(var c=0;c<a;c++){var d=B[b+4*c>>2];r.deleteVertexArray(vc[d]);vc[d]=null}},wa:function(a){r.depthMask(!!a)},va:function(a){r.disable(a)},ua:function(a){r.disableVertexAttribArray(a)},ta:function(a,b,c){r.drawArrays(a,b,c)},gc:function(a,
b,c,d){r.drawArraysInstanced(a,b,c,d)},ec:function(a,b,c,d,e){r.de.drawArraysInstancedBaseInstanceWEBGL(a,b,c,d,e)},cc:function(a,b){for(var c=Cc[a],d=0;d<a;d++)c[d]=B[b+4*d>>2];r.drawBuffers(c)},sa:function(a,b,c,d){r.drawElements(a,b,c,d)},fc:function(a,b,c,d,e){r.drawElementsInstanced(a,b,c,d,e)},dc:function(a,b,c,d,e,f,g){r.de.drawElementsInstancedBaseVertexBaseInstanceWEBGL(a,b,c,d,e,f,g)},_b:function(a,b,c,d,e,f){r.drawElements(a,d,e,f)},ra:function(a){r.enable(a)},qa:function(a){r.enableVertexAttribArray(a)},
Gb:function(a,b){return(a=r.fenceSync(a,b))?(b=ea(xc),a.name=b,xc[b]=a,b):0},oa:function(){r.finish()},na:function(){r.flush()},Rb:function(a,b,c,d){r.framebufferRenderbuffer(a,b,c,tc[d])},Qb:function(a,b,c,d,e){r.framebufferTexture2D(a,b,c,uc[d],e)},ma:function(a){r.frontFace(a)},la:function(a,b){Dc(a,b,"createBuffer",rc)},Pb:function(a,b){Dc(a,b,"createFramebuffer",sc)},Ob:function(a,b){Dc(a,b,"createRenderbuffer",tc)},Cb:function(a,b){Dc(a,b,"createSampler",wc)},ka:function(a,b){Dc(a,b,"createTexture",
uc)},kc:function(a,b){Dc(a,b,"createVertexArray",vc)},hc:function(a,b){Dc(a,b,"createVertexArray",vc)},Nb:function(a){r.generateMipmap(a)},ja:function(a,b,c){c?B[c>>2]=r.getBufferParameter(a,b):T(1281)},ia:function(){var a=r.getError()||Bc;Bc=0;return a},Mb:function(a,b,c,d){a=r.getFramebufferAttachmentParameter(a,b,c);if(a instanceof WebGLRenderbuffer||a instanceof WebGLTexture)a=a.name|0;B[d>>2]=a},Ya:function(a,b){Ec(a,b)},ha:function(a,b,c,d){a=r.getProgramInfoLog(R[a]);null===a&&(a="(unknown error)");
b=0<b&&d?Da(a,y,d,b):0;c&&(B[c>>2]=b)},ga:function(a,b,c){if(c)if(a>=qc)T(1281);else if(a=R[a],35716==b)a=r.getProgramInfoLog(a),null===a&&(a="(unknown error)"),B[c>>2]=a.length+1;else if(35719==b){if(!a.Pd)for(b=0;b<r.getProgramParameter(a,35718);++b)a.Pd=Math.max(a.Pd,r.getActiveUniform(a,b).name.length+1);B[c>>2]=a.Pd}else if(35722==b){if(!a.Nd)for(b=0;b<r.getProgramParameter(a,35721);++b)a.Nd=Math.max(a.Nd,r.getActiveAttrib(a,b).name.length+1);B[c>>2]=a.Nd}else if(35381==b){if(!a.Od)for(b=0;b<
r.getProgramParameter(a,35382);++b)a.Od=Math.max(a.Od,r.getActiveUniformBlockName(a,b).length+1);B[c>>2]=a.Od}else B[c>>2]=r.getProgramParameter(a,b);else T(1281)},Lb:function(a,b,c){c?B[c>>2]=r.getRenderbufferParameter(a,b):T(1281)},fa:function(a,b,c,d){a=r.getShaderInfoLog(S[a]);null===a&&(a="(unknown error)");b=0<b&&d?Da(a,y,d,b):0;c&&(B[c>>2]=b)},xb:function(a,b,c,d){a=r.getShaderPrecisionFormat(a,b);B[c>>2]=a.rangeMin;B[c+4>>2]=a.rangeMax;B[d>>2]=a.precision},da:function(a,b,c){c?35716==b?(a=
r.getShaderInfoLog(S[a]),null===a&&(a="(unknown error)"),B[c>>2]=a?a.length+1:0):35720==b?(a=r.getShaderSource(S[a]),B[c>>2]=a?a.length+1:0):B[c>>2]=r.getShaderParameter(S[a],b):T(1281)},t:function(a){var b=yc[a];if(!b){switch(a){case 7939:b=r.getSupportedExtensions()||[];b=b.concat(b.map(function(d){return"GL_"+d}));b=Fc(b.join(" "));break;case 7936:case 7937:case 37445:case 37446:(b=r.getParameter(a))||T(1280);b=b&&Fc(b);break;case 7938:b=r.getParameter(7938);b=2<=m.version?"OpenGL ES 3.0 ("+b+
")":"OpenGL ES 2.0 ("+b+")";b=Fc(b);break;case 35724:b=r.getParameter(35724);var c=b.match(/^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/);null!==c&&(3==c[1].length&&(c[1]+="0"),b="OpenGL ES GLSL ES "+c[1]+" ("+b+")");b=Fc(b);break;default:T(1280)}yc[a]=b}return b},Za:function(a,b){if(2>m.version)return T(1282),0;var c=zc[a];if(c)return 0>b||b>=c.length?(T(1281),0):c[b];switch(a){case 7939:return c=r.getSupportedExtensions()||[],c=c.concat(c.map(function(d){return"GL_"+d})),c=c.map(function(d){return Fc(d)}),
c=zc[a]=c,0>b||b>=c.length?(T(1281),0):c[b];default:return T(1280),0}},ca:function(a,b){b=Ca(b);if(a=R[a]){var c=a,d=c.Gd,e=c.ke,f;if(!d)for(c.Gd=d={},c.je={},f=0;f<r.getProgramParameter(c,35718);++f){var g=r.getActiveUniform(c,f);var h=g.name;g=g.size;var n=Hc(h);n=0<n?h.slice(0,n):h;var p=c.$d;c.$d+=g;e[n]=[g,p];for(h=0;h<g;++h)d[p]=h,c.je[p++]=n}c=a.Gd;d=0;e=b;f=Hc(b);0<f&&(d=parseInt(b.slice(f+1))>>>0,e=b.slice(0,f));if((e=a.ke[e])&&d<e[0]&&(d+=e[1],c[d]=c[d]||r.getUniformLocation(a,b)))return d}else T(1281);
return-1},zb:function(a,b,c){for(var d=Cc[b],e=0;e<b;e++)d[e]=B[c+4*e>>2];r.invalidateFramebuffer(a,d)},yb:function(a,b,c,d,e,f,g){for(var h=Cc[b],n=0;n<b;n++)h[n]=B[c+4*n>>2];r.invalidateSubFramebuffer(a,h,d,e,f,g)},Fb:function(a){return r.isSync(xc[a])},ba:function(a){return(a=uc[a])?r.isTexture(a):0},aa:function(a){r.lineWidth(a)},$:function(a){a=R[a];r.linkProgram(a);a.Gd=0;a.ke={}},ac:function(a,b,c,d,e,f){r.ge.multiDrawArraysInstancedBaseInstanceWEBGL(a,B,b>>2,B,c>>2,B,d>>2,C,e>>2,f)},$b:function(a,
b,c,d,e,f,g,h){r.ge.multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(a,B,b>>2,c,B,d>>2,B,e>>2,B,f>>2,C,g>>2,h)},_:function(a,b){3317==a&&(Ac=b);r.pixelStorei(a,b)},bc:function(a){r.readBuffer(a)},Z:function(a,b,c,d,e,f,g){if(2<=m.version)if(r.Wd)r.readPixels(a,b,c,d,e,f,g);else{var h=Ic(f);r.readPixels(a,b,c,d,e,f,h,g>>31-Math.clz32(h.BYTES_PER_ELEMENT))}else(g=Jc(f,e,c,d,g))?r.readPixels(a,b,c,d,e,f,g):T(1280)},Kb:function(a,b,c,d){r.renderbufferStorage(a,b,c,d)},Ib:function(a,b,c,d,e){r.renderbufferStorageMultisample(a,
b,c,d,e)},Bb:function(a,b,c){r.samplerParameteri(wc[a],b,c)},Ab:function(a,b,c){r.samplerParameteri(wc[a],b,B[c>>2])},Y:function(a,b,c,d){r.scissor(a,b,c,d)},X:function(a,b,c,d){for(var e="",f=0;f<b;++f){var g=d?B[d+4*f>>2]:-1;e+=Ca(B[c+4*f>>2],0>g?void 0:g)}r.shaderSource(S[a],e)},W:function(a,b,c){r.stencilFunc(a,b,c)},U:function(a,b,c,d){r.stencilFuncSeparate(a,b,c,d)},T:function(a){r.stencilMask(a)},S:function(a,b){r.stencilMaskSeparate(a,b)},R:function(a,b,c){r.stencilOp(a,b,c)},Q:function(a,
b,c,d){r.stencilOpSeparate(a,b,c,d)},P:function(a,b,c,d,e,f,g,h,n){if(2<=m.version)if(r.Ad)r.texImage2D(a,b,c,d,e,f,g,h,n);else if(n){var p=Ic(h);r.texImage2D(a,b,c,d,e,f,g,h,p,n>>31-Math.clz32(p.BYTES_PER_ELEMENT))}else r.texImage2D(a,b,c,d,e,f,g,h,null);else r.texImage2D(a,b,c,d,e,f,g,h,n?Jc(h,g,d,e,n):null)},O:function(a,b,c){r.texParameterf(a,b,c)},N:function(a,b,c){r.texParameterf(a,b,G[c>>2])},M:function(a,b,c){r.texParameteri(a,b,c)},L:function(a,b,c){r.texParameteri(a,b,B[c>>2])},Zb:function(a,
b,c,d,e){r.texStorage2D(a,b,c,d,e)},J:function(a,b,c,d,e,f,g,h,n){if(2<=m.version)if(r.Ad)r.texSubImage2D(a,b,c,d,e,f,g,h,n);else if(n){var p=Ic(h);r.texSubImage2D(a,b,c,d,e,f,g,h,p,n>>31-Math.clz32(p.BYTES_PER_ELEMENT))}else r.texSubImage2D(a,b,c,d,e,f,g,h,null);else p=null,n&&(p=Jc(h,g,e,f,n)),r.texSubImage2D(a,b,c,d,e,f,g,h,p)},I:function(a,b){r.uniform1f(U(a),b)},H:function(a,b,c){if(2<=m.version)r.uniform1fv(U(a),G,c>>2,b);else{if(288>=b)for(var d=Kc[b-1],e=0;e<b;++e)d[e]=G[c+4*e>>2];else d=
G.subarray(c>>2,c+4*b>>2);r.uniform1fv(U(a),d)}},G:function(a,b){r.uniform1i(U(a),b)},F:function(a,b,c){if(2<=m.version)r.uniform1iv(U(a),B,c>>2,b);else{if(288>=b)for(var d=Lc[b-1],e=0;e<b;++e)d[e]=B[c+4*e>>2];else d=B.subarray(c>>2,c+4*b>>2);r.uniform1iv(U(a),d)}},E:function(a,b,c){r.uniform2f(U(a),b,c)},D:function(a,b,c){if(2<=m.version)r.uniform2fv(U(a),G,c>>2,2*b);else{if(144>=b)for(var d=Kc[2*b-1],e=0;e<2*b;e+=2)d[e]=G[c+4*e>>2],d[e+1]=G[c+(4*e+4)>>2];else d=G.subarray(c>>2,c+8*b>>2);r.uniform2fv(U(a),
d)}},C:function(a,b,c){r.uniform2i(U(a),b,c)},B:function(a,b,c){if(2<=m.version)r.uniform2iv(U(a),B,c>>2,2*b);else{if(144>=b)for(var d=Lc[2*b-1],e=0;e<2*b;e+=2)d[e]=B[c+4*e>>2],d[e+1]=B[c+(4*e+4)>>2];else d=B.subarray(c>>2,c+8*b>>2);r.uniform2iv(U(a),d)}},A:function(a,b,c,d){r.uniform3f(U(a),b,c,d)},Ec:function(a,b,c){if(2<=m.version)r.uniform3fv(U(a),G,c>>2,3*b);else{if(96>=b)for(var d=Kc[3*b-1],e=0;e<3*b;e+=3)d[e]=G[c+4*e>>2],d[e+1]=G[c+(4*e+4)>>2],d[e+2]=G[c+(4*e+8)>>2];else d=G.subarray(c>>2,
c+12*b>>2);r.uniform3fv(U(a),d)}},Dc:function(a,b,c,d){r.uniform3i(U(a),b,c,d)},Cc:function(a,b,c){if(2<=m.version)r.uniform3iv(U(a),B,c>>2,3*b);else{if(96>=b)for(var d=Lc[3*b-1],e=0;e<3*b;e+=3)d[e]=B[c+4*e>>2],d[e+1]=B[c+(4*e+4)>>2],d[e+2]=B[c+(4*e+8)>>2];else d=B.subarray(c>>2,c+12*b>>2);r.uniform3iv(U(a),d)}},Bc:function(a,b,c,d,e){r.uniform4f(U(a),b,c,d,e)},Ac:function(a,b,c){if(2<=m.version)r.uniform4fv(U(a),G,c>>2,4*b);else{if(72>=b){var d=Kc[4*b-1],e=G;c>>=2;for(var f=0;f<4*b;f+=4){var g=c+
f;d[f]=e[g];d[f+1]=e[g+1];d[f+2]=e[g+2];d[f+3]=e[g+3]}}else d=G.subarray(c>>2,c+16*b>>2);r.uniform4fv(U(a),d)}},zc:function(a,b,c,d,e){r.uniform4i(U(a),b,c,d,e)},yc:function(a,b,c){if(2<=m.version)r.uniform4iv(U(a),B,c>>2,4*b);else{if(72>=b)for(var d=Lc[4*b-1],e=0;e<4*b;e+=4)d[e]=B[c+4*e>>2],d[e+1]=B[c+(4*e+4)>>2],d[e+2]=B[c+(4*e+8)>>2],d[e+3]=B[c+(4*e+12)>>2];else d=B.subarray(c>>2,c+16*b>>2);r.uniform4iv(U(a),d)}},xc:function(a,b,c,d){if(2<=m.version)r.uniformMatrix2fv(U(a),!!c,G,d>>2,4*b);else{if(72>=
b)for(var e=Kc[4*b-1],f=0;f<4*b;f+=4)e[f]=G[d+4*f>>2],e[f+1]=G[d+(4*f+4)>>2],e[f+2]=G[d+(4*f+8)>>2],e[f+3]=G[d+(4*f+12)>>2];else e=G.subarray(d>>2,d+16*b>>2);r.uniformMatrix2fv(U(a),!!c,e)}},wc:function(a,b,c,d){if(2<=m.version)r.uniformMatrix3fv(U(a),!!c,G,d>>2,9*b);else{if(32>=b)for(var e=Kc[9*b-1],f=0;f<9*b;f+=9)e[f]=G[d+4*f>>2],e[f+1]=G[d+(4*f+4)>>2],e[f+2]=G[d+(4*f+8)>>2],e[f+3]=G[d+(4*f+12)>>2],e[f+4]=G[d+(4*f+16)>>2],e[f+5]=G[d+(4*f+20)>>2],e[f+6]=G[d+(4*f+24)>>2],e[f+7]=G[d+(4*f+28)>>2],e[f+
8]=G[d+(4*f+32)>>2];else e=G.subarray(d>>2,d+36*b>>2);r.uniformMatrix3fv(U(a),!!c,e)}},vc:function(a,b,c,d){if(2<=m.version)r.uniformMatrix4fv(U(a),!!c,G,d>>2,16*b);else{if(18>=b){var e=Kc[16*b-1],f=G;d>>=2;for(var g=0;g<16*b;g+=16){var h=d+g;e[g]=f[h];e[g+1]=f[h+1];e[g+2]=f[h+2];e[g+3]=f[h+3];e[g+4]=f[h+4];e[g+5]=f[h+5];e[g+6]=f[h+6];e[g+7]=f[h+7];e[g+8]=f[h+8];e[g+9]=f[h+9];e[g+10]=f[h+10];e[g+11]=f[h+11];e[g+12]=f[h+12];e[g+13]=f[h+13];e[g+14]=f[h+14];e[g+15]=f[h+15]}}else e=G.subarray(d>>2,d+
64*b>>2);r.uniformMatrix4fv(U(a),!!c,e)}},tc:function(a){a=R[a];r.useProgram(a);r.se=a},sc:function(a,b){r.vertexAttrib1f(a,b)},rc:function(a,b){r.vertexAttrib2f(a,G[b>>2],G[b+4>>2])},qc:function(a,b){r.vertexAttrib3f(a,G[b>>2],G[b+4>>2],G[b+8>>2])},pc:function(a,b){r.vertexAttrib4f(a,G[b>>2],G[b+4>>2],G[b+8>>2],G[b+12>>2])},Yb:function(a,b){r.vertexAttribDivisor(a,b)},Xb:function(a,b,c,d,e){r.vertexAttribIPointer(a,b,c,d,e)},oc:function(a,b,c,d,e,f){r.vertexAttribPointer(a,b,c,!!d,e,f)},nc:function(a,
b,c,d){r.viewport(a,b,c,d)},$a:function(a,b,c,d){r.waitSync(xc[a],b,(c>>>0)+4294967296*d)},u:function(a){var b=y.length;a>>>=0;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(a,d);0<d%65536&&(d+=65536-d%65536);a:{try{ya.grow(Math.min(2147483648,d)-Oa.byteLength+65535>>>16);Ra();var e=1;break a}catch(f){}e=void 0}if(e)return!0}return!1},qb:function(a,b){var c=0;Nc().forEach(function(d,e){var f=b+c;e=B[a+4*e>>2]=f;for(f=0;f<d.length;++f)Pa[e++>>
0]=d.charCodeAt(f);Pa[e>>0]=0;c+=d.length+1});return 0},rb:function(a,b){var c=Nc();B[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});B[b>>2]=d;return 0},tb:function(){return 0},eb:function(){},sb:function(a,b,c,d){for(var e=0,f=0;f<c;f++){var g=B[b>>2],h=B[b+4>>2];b+=8;for(var n=0;n<h;n++){var p=y[g+n],q=Pc[a];0===p||10===p?((1===a?ua:va)(Ba(q,0)),q.length=0):q.push(p)}e+=h}B[d>>2]=e;return 0},b:function(){return wa},db:function(a,b){r.bindFramebuffer(a,sc[b])},w:function(a,b){Ec(a,
b)},n:bd,h:cd,o:dd,r:ed,hb:fd,ib:gd,q:hd,j:jd,d:kd,p:ld,i:md,kb:nd,gb:od,lb:pd,c:function(a){wa=a},ob:function(a,b,c,d){return Vc(a,b,c,d)}};
(function(){function a(e){k.asm=e.exports;ya=k.asm.Hc;Ra();Sa=k.asm.Rc;Ua.unshift(k.asm.Ic);Xa--;k.monitorRunDependencies&&k.monitorRunDependencies(Xa);0==Xa&&(null!==Ya&&(clearInterval(Ya),Ya=null),Za&&(e=Za,Za=null,e()))}function b(e){a(e.instance)}function c(e){return cb().then(function(f){return WebAssembly.instantiate(f,d)}).then(function(f){return f}).then(e,function(f){va("failed to asynchronously prepare wasm: "+f);ta(f)})}var d={a:qd};Xa++;k.monitorRunDependencies&&k.monitorRunDependencies(Xa);
if(k.instantiateWasm)try{return k.instantiateWasm(d,a)}catch(e){return va("Module.instantiateWasm callback failed with error: "+e),!1}(function(){return xa||"function"!==typeof WebAssembly.instantiateStreaming||$a()||H.startsWith("file://")||"function"!==typeof fetch?c(b):fetch(H,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(f){va("wasm streaming compile failed: "+f);va("falling back to ArrayBuffer instantiation");return c(b)})})})().catch(ba);
return{}})();k.___wasm_call_ctors=function(){return(k.___wasm_call_ctors=k.asm.Ic).apply(null,arguments)};var Gc=k._malloc=function(){return(Gc=k._malloc=k.asm.Jc).apply(null,arguments)},P=k._free=function(){return(P=k._free=k.asm.Kc).apply(null,arguments)},ad=k.___errno_location=function(){return(ad=k.___errno_location=k.asm.Lc).apply(null,arguments)},Ub=k.___getTypeName=function(){return(Ub=k.___getTypeName=k.asm.Mc).apply(null,arguments)};
k.___embind_register_native_and_builtin_types=function(){return(k.___embind_register_native_and_builtin_types=k.asm.Nc).apply(null,arguments)};var W=k.stackSave=function(){return(W=k.stackSave=k.asm.Oc).apply(null,arguments)},Y=k.stackRestore=function(){return(Y=k.stackRestore=k.asm.Pc).apply(null,arguments)},Z=k._setThrew=function(){return(Z=k._setThrew=k.asm.Qc).apply(null,arguments)};k.dynCall_iiiij=function(){return(k.dynCall_iiiij=k.asm.Sc).apply(null,arguments)};
k.dynCall_viiij=function(){return(k.dynCall_viiij=k.asm.Tc).apply(null,arguments)};k.dynCall_iiij=function(){return(k.dynCall_iiij=k.asm.Uc).apply(null,arguments)};k.dynCall_viij=function(){return(k.dynCall_viij=k.asm.Vc).apply(null,arguments)};k.dynCall_jiiiiji=function(){return(k.dynCall_jiiiiji=k.asm.Wc).apply(null,arguments)};k.dynCall_jiiiiii=function(){return(k.dynCall_jiiiiii=k.asm.Xc).apply(null,arguments)};k.dynCall_viiiiij=function(){return(k.dynCall_viiiiij=k.asm.Yc).apply(null,arguments)};
k.dynCall_jii=function(){return(k.dynCall_jii=k.asm.Zc).apply(null,arguments)};k.dynCall_viji=function(){return(k.dynCall_viji=k.asm._c).apply(null,arguments)};k.dynCall_ji=function(){return(k.dynCall_ji=k.asm.$c).apply(null,arguments)};k.dynCall_iij=function(){return(k.dynCall_iij=k.asm.ad).apply(null,arguments)};k.dynCall_vij=function(){return(k.dynCall_vij=k.asm.bd).apply(null,arguments)};k.dynCall_iijj=function(){return(k.dynCall_iijj=k.asm.cd).apply(null,arguments)};
k.dynCall_jiji=function(){return(k.dynCall_jiji=k.asm.dd).apply(null,arguments)};k.dynCall_iiiiij=function(){return(k.dynCall_iiiiij=k.asm.ed).apply(null,arguments)};k.dynCall_iiiiijj=function(){return(k.dynCall_iiiiijj=k.asm.fd).apply(null,arguments)};k.dynCall_iiiiiijj=function(){return(k.dynCall_iiiiiijj=k.asm.gd).apply(null,arguments)};k.dynCall_viijii=function(){return(k.dynCall_viijii=k.asm.hd).apply(null,arguments)};
function kd(a,b,c){var d=W();try{I(a)(b,c)}catch(e){Y(d);if(e!==e+0&&"longjmp"!==e)throw e;Z(1,0)}}function dd(a,b,c,d){var e=W();try{return I(a)(b,c,d)}catch(f){Y(e);if(f!==f+0&&"longjmp"!==f)throw f;Z(1,0)}}function md(a,b,c,d,e){var f=W();try{I(a)(b,c,d,e)}catch(g){Y(f);if(g!==g+0&&"longjmp"!==g)throw g;Z(1,0)}}function jd(a,b){var c=W();try{I(a)(b)}catch(d){Y(c);if(d!==d+0&&"longjmp"!==d)throw d;Z(1,0)}}
function cd(a,b,c){var d=W();try{return I(a)(b,c)}catch(e){Y(d);if(e!==e+0&&"longjmp"!==e)throw e;Z(1,0)}}function ed(a,b,c,d,e){var f=W();try{return I(a)(b,c,d,e)}catch(g){Y(f);if(g!==g+0&&"longjmp"!==g)throw g;Z(1,0)}}function bd(a,b){var c=W();try{return I(a)(b)}catch(d){Y(c);if(d!==d+0&&"longjmp"!==d)throw d;Z(1,0)}}function hd(a){var b=W();try{I(a)()}catch(c){Y(b);if(c!==c+0&&"longjmp"!==c)throw c;Z(1,0)}}
function pd(a,b,c,d,e,f,g,h,n){var p=W();try{I(a)(b,c,d,e,f,g,h,n)}catch(q){Y(p);if(q!==q+0&&"longjmp"!==q)throw q;Z(1,0)}}function ld(a,b,c,d){var e=W();try{I(a)(b,c,d)}catch(f){Y(e);if(f!==f+0&&"longjmp"!==f)throw f;Z(1,0)}}function nd(a,b,c,d,e,f){var g=W();try{I(a)(b,c,d,e,f)}catch(h){Y(g);if(h!==h+0&&"longjmp"!==h)throw h;Z(1,0)}}function gd(a,b,c,d,e,f,g){var h=W();try{return I(a)(b,c,d,e,f,g)}catch(n){Y(h);if(n!==n+0&&"longjmp"!==n)throw n;Z(1,0)}}
function fd(a,b,c,d,e,f){var g=W();try{return I(a)(b,c,d,e,f)}catch(h){Y(g);if(h!==h+0&&"longjmp"!==h)throw h;Z(1,0)}}function od(a,b,c,d,e,f,g){var h=W();try{I(a)(b,c,d,e,f,g)}catch(n){Y(h);if(n!==n+0&&"longjmp"!==n)throw n;Z(1,0)}}var rd;Za=function sd(){rd||td();rd||(Za=sd)};
function td(){function a(){if(!rd&&(rd=!0,k.calledRun=!0,!za)){db(Ua);aa(k);if(k.onRuntimeInitialized)k.onRuntimeInitialized();if(k.postRun)for("function"==typeof k.postRun&&(k.postRun=[k.postRun]);k.postRun.length;){var b=k.postRun.shift();Va.unshift(b)}db(Va)}}if(!(0<Xa)){if(k.preRun)for("function"==typeof k.preRun&&(k.preRun=[k.preRun]);k.preRun.length;)Wa();db(Ta);0<Xa||(k.setStatus?(k.setStatus("Running..."),setTimeout(function(){setTimeout(function(){k.setStatus("")},1);a()},1)):a())}}
k.run=td;if(k.preInit)for("function"==typeof k.preInit&&(k.preInit=[k.preInit]);0<k.preInit.length;)k.preInit.pop()();td();


  return Rive.ready
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rive);

/***/ }),
/* 2 */
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@rive-app/webgl","version":"1.0.43","description":"Rive\'s webgl based web api.","main":"rive.js","homepage":"https://rive.app","repository":{"type":"git","url":"https://github.com/rive-app/rive-wasm/tree/master/js"},"keywords":["rive","animation"],"author":"Rive","contributors":["Luigi Rosso <luigi@rive.app> (https://rive.app)","Maxwell Talbot <max@rive.app> (https://rive.app)","Arthur Vivian <arthur@rive.app> (https://rive.app)","Umberto Sonnino <umberto@rive.app> (https://rive.app)","Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)"],"license":"MIT","files":["rive.js","rive.wasm","rive.js.map","rive.d.ts","rive_advanced.mjs.d.ts"],"typings":"rive.d.ts","dependencies":{},"browser":{"fs":false,"path":false}}');

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fit": () => (/* binding */ Fit),
/* harmony export */   "Alignment": () => (/* binding */ Alignment),
/* harmony export */   "Layout": () => (/* binding */ Layout),
/* harmony export */   "RuntimeLoader": () => (/* binding */ RuntimeLoader),
/* harmony export */   "StateMachineInputType": () => (/* binding */ StateMachineInputType),
/* harmony export */   "StateMachineInput": () => (/* binding */ StateMachineInput),
/* harmony export */   "EventType": () => (/* binding */ EventType),
/* harmony export */   "LoopType": () => (/* binding */ LoopType),
/* harmony export */   "Rive": () => (/* binding */ Rive),
/* harmony export */   "Testing": () => (/* binding */ Testing)
/* harmony export */ });
/* harmony import */ var _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var package_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


// Tracks playback states; numbers map to the runtime's numerical values
// i.e. play: 0, pause: 1, stop: 2
var PlaybackState;
(function (PlaybackState) {
    PlaybackState[PlaybackState["Play"] = 0] = "Play";
    PlaybackState[PlaybackState["Pause"] = 1] = "Pause";
    PlaybackState[PlaybackState["Stop"] = 2] = "Stop";
})(PlaybackState || (PlaybackState = {}));
// #region layout
// Fit options for the canvas
var Fit;
(function (Fit) {
    Fit["Cover"] = "cover";
    Fit["Contain"] = "contain";
    Fit["Fill"] = "fill";
    Fit["FitWidth"] = "fitWidth";
    Fit["FitHeight"] = "fitHeight";
    Fit["None"] = "none";
    Fit["ScaleDown"] = "scaleDown";
})(Fit || (Fit = {}));
// Alignment options for the canvas
var Alignment;
(function (Alignment) {
    Alignment["Center"] = "center";
    Alignment["TopLeft"] = "topLeft";
    Alignment["TopCenter"] = "topCenter";
    Alignment["TopRight"] = "topRight";
    Alignment["CenterLeft"] = "centerLeft";
    Alignment["CenterRight"] = "centerRight";
    Alignment["BottomLeft"] = "bottomLeft";
    Alignment["BottomCenter"] = "bottomCenter";
    Alignment["BottomRight"] = "bottomRight";
})(Alignment || (Alignment = {}));
// Alignment options for Rive animations in a HTML canvas
var Layout = /** @class */ (function () {
    function Layout(params) {
        var _a, _b, _c, _d, _e, _f;
        this.fit = (_a = params === null || params === void 0 ? void 0 : params.fit) !== null && _a !== void 0 ? _a : Fit.Contain;
        this.alignment = (_b = params === null || params === void 0 ? void 0 : params.alignment) !== null && _b !== void 0 ? _b : Alignment.Center;
        this.minX = (_c = params === null || params === void 0 ? void 0 : params.minX) !== null && _c !== void 0 ? _c : 0;
        this.minY = (_d = params === null || params === void 0 ? void 0 : params.minY) !== null && _d !== void 0 ? _d : 0;
        this.maxX = (_e = params === null || params === void 0 ? void 0 : params.maxX) !== null && _e !== void 0 ? _e : 0;
        this.maxY = (_f = params === null || params === void 0 ? void 0 : params.maxY) !== null && _f !== void 0 ? _f : 0;
    }
    // Alternative constructor to build a Layout from an interface/object
    Layout.new = function (_a) {
        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;
        console.warn('This function is deprecated: please use `new Layout({})` instead');
        return new Layout({ fit: fit, alignment: alignment, minX: minX, minY: minY, maxX: maxX, maxY: maxY });
    };
    /**
     * Makes a copy of the layout, replacing any specified parameters
     */
    Layout.prototype.copyWith = function (_a) {
        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;
        return new Layout({
            fit: fit !== null && fit !== void 0 ? fit : this.fit,
            alignment: alignment !== null && alignment !== void 0 ? alignment : this.alignment,
            minX: minX !== null && minX !== void 0 ? minX : this.minX,
            minY: minY !== null && minY !== void 0 ? minY : this.minY,
            maxX: maxX !== null && maxX !== void 0 ? maxX : this.maxX,
            maxY: maxY !== null && maxY !== void 0 ? maxY : this.maxY
        });
    };
    // Returns fit for the Wasm runtime format
    Layout.prototype.runtimeFit = function (rive) {
        if (this.cachedRuntimeFit)
            return this.cachedRuntimeFit;
        var fit;
        if (this.fit === Fit.Cover)
            fit = rive.Fit.cover;
        else if (this.fit === Fit.Contain)
            fit = rive.Fit.contain;
        else if (this.fit === Fit.Fill)
            fit = rive.Fit.fill;
        else if (this.fit === Fit.FitWidth)
            fit = rive.Fit.fitWidth;
        else if (this.fit === Fit.FitHeight)
            fit = rive.Fit.fitHeight;
        else if (this.fit === Fit.ScaleDown)
            fit = rive.Fit.scaleDown;
        else
            fit = rive.Fit.none;
        this.cachedRuntimeFit = fit;
        return fit;
    };
    // Returns alignment for the Wasm runtime format
    Layout.prototype.runtimeAlignment = function (rive) {
        if (this.cachedRuntimeAlignment)
            return this.cachedRuntimeAlignment;
        var alignment;
        if (this.alignment === Alignment.TopLeft)
            alignment = rive.Alignment.topLeft;
        else if (this.alignment === Alignment.TopCenter)
            alignment = rive.Alignment.topCenter;
        else if (this.alignment === Alignment.TopRight)
            alignment = rive.Alignment.topRight;
        else if (this.alignment === Alignment.CenterLeft)
            alignment = rive.Alignment.centerLeft;
        else if (this.alignment === Alignment.CenterRight)
            alignment = rive.Alignment.centerRight;
        else if (this.alignment === Alignment.BottomLeft)
            alignment = rive.Alignment.bottomLeft;
        else if (this.alignment === Alignment.BottomCenter)
            alignment = rive.Alignment.bottomCenter;
        else if (this.alignment === Alignment.BottomRight)
            alignment = rive.Alignment.bottomRight;
        else
            alignment = rive.Alignment.center;
        this.cachedRuntimeAlignment = alignment;
        return alignment;
    };
    return Layout;
}());

// Runtime singleton; use getInstance to provide a callback that returns the
// Rive runtime
var RuntimeLoader = /** @class */ (function () {
    // Class is never instantiated
    function RuntimeLoader() {
    }
    // Loads the runtime
    RuntimeLoader.loadRuntime = function () {
        _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__.default({
            // Loads Wasm bundle
            locateFile: function (_) { return RuntimeLoader.wasmURL; }
        }).then(function (rive) {
            var _a;
            RuntimeLoader.runtime = rive;
            // Fire all the callbacks
            while (RuntimeLoader.callBackQueue.length > 0) {
                (_a = RuntimeLoader.callBackQueue.shift()) === null || _a === void 0 ? void 0 : _a(RuntimeLoader.runtime);
            }
        });
    };
    // Provides a runtime instance via a callback
    RuntimeLoader.getInstance = function (callback) {
        // If it's not loading, start loading runtime
        if (!RuntimeLoader.isLoading) {
            RuntimeLoader.isLoading = true;
            RuntimeLoader.loadRuntime();
        }
        if (!RuntimeLoader.runtime) {
            RuntimeLoader.callBackQueue.push(callback);
        }
        else {
            callback(RuntimeLoader.runtime);
        }
    };
    // Provides a runtime instance via a promise
    RuntimeLoader.awaitInstance = function () {
        return new Promise(function (resolve, reject) {
            return RuntimeLoader.getInstance(function (rive) { return resolve(rive); });
        });
    };
    // Manually sets the wasm url
    RuntimeLoader.setWasmUrl = function (url) {
        RuntimeLoader.wasmURL = url;
    };
    // Flag to indicate that loading has started/completed
    RuntimeLoader.isLoading = false;
    // List of callbacks for the runtime that come in while loading
    RuntimeLoader.callBackQueue = [];
    // Path to the Wasm file; default path works for testing only;
    // if embedded wasm is used then this is never used.
    RuntimeLoader.wasmURL = "https://unpkg.com/" + package_json__WEBPACK_IMPORTED_MODULE_1__.name + "@" + package_json__WEBPACK_IMPORTED_MODULE_1__.version + "/rive.wasm";
    return RuntimeLoader;
}());

// #endregion
// #region animations
// Wraps animations and instances from the runtime and keeps track of playback
// state
var Animation = /** @class */ (function () {
    /**
     * Constructs a new animation
     * @constructor
     * @param {any} animation: runtime animation object
     * @param {any} instance: runtime animation instance object
     */
    function Animation(animation, artboard, runtime, playing) {
        this.animation = animation;
        this.artboard = artboard;
        this.playing = playing;
        this.loopCount = 0;
        // Time to which the animation should move to on the next render
        this.scrubTo = null;
        this.instance = new runtime.LinearAnimationInstance(animation, artboard);
    }
    Object.defineProperty(Animation.prototype, "name", {
        // Returns the animation's name
        get: function () {
            return this.animation.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "time", {
        // Returns the animation's current time
        get: function () {
            return this.instance.time;
        },
        // Sets the animation's current time
        set: function (value) {
            this.instance.time = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "loopValue", {
        // Returns the animation's loop type
        get: function () {
            return this.animation.loopValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Advances the animation by the give time. If the animation needs scrubbing,
     * time is ignored and the stored scrub value is used.
     * @param time the time to advance the animation by if no scrubbing required
     */
    Animation.prototype.advance = function (time) {
        if (this.scrubTo === null) {
            this.instance.advance(time);
        }
        else {
            this.instance.time = 0;
            this.instance.advance(this.scrubTo);
            this.scrubTo = null;
        }
    };
    Object.defineProperty(Animation.prototype, "needsScrub", {
        get: function () {
            return this.scrubTo !== null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Deletes the backing Wasm animation instance; once this is called, this
     * animation is no more.
     */
    Animation.prototype.cleanup = function () {
        this.instance.delete();
    };
    return Animation;
}());
// #endregion
// #region state machines
var StateMachineInputType;
(function (StateMachineInputType) {
    StateMachineInputType[StateMachineInputType["Number"] = 56] = "Number";
    StateMachineInputType[StateMachineInputType["Trigger"] = 58] = "Trigger";
    StateMachineInputType[StateMachineInputType["Boolean"] = 59] = "Boolean";
})(StateMachineInputType || (StateMachineInputType = {}));
/**
 * An input for a state machine
 */
var StateMachineInput = /** @class */ (function () {
    function StateMachineInput(type, runtimeInput) {
        this.type = type;
        this.runtimeInput = runtimeInput;
    }
    Object.defineProperty(StateMachineInput.prototype, "name", {
        /**
         * Returns the name of the input
         */
        get: function () {
            return this.runtimeInput.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StateMachineInput.prototype, "value", {
        /**
         * Returns the current value of the input
         */
        get: function () {
            return this.runtimeInput.value;
        },
        /**
         * Sets the value of the input
         */
        set: function (value) {
            this.runtimeInput.value = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fires a trigger; does nothing on Number or Boolean input types
     */
    StateMachineInput.prototype.fire = function () {
        if (this.type === StateMachineInputType.Trigger) {
            this.runtimeInput.fire();
        }
    };
    return StateMachineInput;
}());

var StateMachine = /** @class */ (function () {
    /**
     * @constructor
     * @param stateMachine runtime state machine object
     * @param instance runtime state machine instance object
     */
    function StateMachine(stateMachine, runtime, playing, artboard) {
        this.stateMachine = stateMachine;
        this.playing = playing;
        this.artboard = artboard;
        /**
         * Caches the inputs from the runtime
         */
        this.inputs = [];
        this.instance = new runtime.StateMachineInstance(stateMachine, artboard);
        this.initInputs(runtime);
    }
    Object.defineProperty(StateMachine.prototype, "name", {
        get: function () {
            return this.stateMachine.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StateMachine.prototype, "statesChanged", {
        /**
         * Returns a list of state names that have changed on this frame
         */
        get: function () {
            var names = [];
            for (var i = 0; i < this.instance.stateChangedCount(); i++) {
                names.push(this.instance.stateChangedNameByIndex(i));
            }
            return names;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fetches references to the state machine's inputs and caches them
     * @param runtime an instance of the runtime; needed for the SMIInput types
     */
    StateMachine.prototype.initInputs = function (runtime) {
        // Fetch the inputs from the runtime if we don't have them
        for (var i = 0; i < this.instance.inputCount(); i++) {
            var input = this.instance.input(i);
            this.inputs.push(this.mapRuntimeInput(input, runtime));
        }
    };
    /**
     * Maps a runtime input to it's appropriate type
     * @param input
     */
    StateMachine.prototype.mapRuntimeInput = function (input, runtime) {
        if (input.type === runtime.SMIInput.bool) {
            return new StateMachineInput(StateMachineInputType.Boolean, input.asBool());
        }
        else if (input.type === runtime.SMIInput.number) {
            return new StateMachineInput(StateMachineInputType.Number, input.asNumber());
        }
        else if (input.type === runtime.SMIInput.trigger) {
            return new StateMachineInput(StateMachineInputType.Trigger, input.asTrigger());
        }
    };
    /**
     * Deletes the backing Wasm state machine instance; once this is called, this
     * state machine is no more.
     */
    StateMachine.prototype.cleanup = function () {
        this.instance.delete();
    };
    return StateMachine;
}());
// #endregion
// #region animator
/**
 * Manages animation
 */
var Animator = /** @class */ (function () {
    /**
     * Constructs a new animator
     * @constructor
     * @param runtime Rive runtime; needed to instance animations & state machines
     * @param artboard the artboard that holds all animations and state machines
     * @param animations optional list of animations
     * @param stateMachines optional list of state machines
     */
    function Animator(runtime, artboard, eventManager, animations, stateMachines) {
        if (animations === void 0) { animations = []; }
        if (stateMachines === void 0) { stateMachines = []; }
        this.runtime = runtime;
        this.artboard = artboard;
        this.eventManager = eventManager;
        this.animations = animations;
        this.stateMachines = stateMachines;
    }
    /**
     * Adds animations and state machines by their names. If names are shared
     * between animations & state machines, then the first one found will be
     * created. Best not to use the same names for these in your Rive file.
     * @param animatable the name(s) of animations and state machines to add
     * @returns a list of names of the playing animations and state machines
     */
    Animator.prototype.add = function (animatables, playing, fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        animatables = mapToStringArray(animatables);
        // If animatables is empty, play or pause everything
        if (animatables.length === 0) {
            this.animations.forEach(function (a) { return a.playing = playing; });
            this.stateMachines.forEach(function (m) { return m.playing = playing; });
        }
        else {
            // Play/pause already instanced items, or create new instances
            var instancedAnimationNames = this.animations.map(function (a) { return a.name; });
            var instancedMachineNames = this.stateMachines.map(function (m) { return m.name; });
            for (var i in animatables) {
                var aIndex = instancedAnimationNames.indexOf(animatables[i]);
                var mIndex = instancedMachineNames.indexOf(animatables[i]);
                if (aIndex >= 0 || mIndex >= 0) {
                    if (aIndex >= 0) {
                        // Animation is instanced, play/pause it
                        this.animations[aIndex].playing = playing;
                    }
                    else {
                        // State machine is instanced, play/pause it
                        this.stateMachines[mIndex].playing = playing;
                    }
                }
                else {
                    // Try to create a new animation instance
                    var anim = this.artboard.animationByName(animatables[i]);
                    if (anim) {
                        this.animations.push(new Animation(anim, this.artboard, this.runtime, playing));
                    }
                    else {
                        // Try to create a new state machine instance
                        var sm = this.artboard.stateMachineByName(animatables[i]);
                        if (sm) {
                            this.stateMachines.push(new StateMachine(sm, this.runtime, playing, this.artboard));
                        }
                    }
                }
            }
        }
        // Fire play/paused events for animations
        if (fireEvent) {
            if (playing) {
                this.eventManager.fire({
                    type: EventType.Play,
                    data: this.playing,
                });
            }
            else {
                this.eventManager.fire({
                    type: EventType.Pause,
                    data: this.paused,
                });
            }
        }
        return playing ? this.playing : this.paused;
    };
    /**
     * Play the named animations/state machines
     * @param animatables the names of the animations/machines to play; plays all if empty
     * @returns a list of the playing items
     */
    Animator.prototype.play = function (animatables) {
        return this.add(animatables, true);
    };
    /**
   * Pauses named animations and state machines, or everything if nothing is
   * specified
   * @param animatables names of the animations and state machines to pause
   * @returns a list of names of the animations and state machines paused
   */
    Animator.prototype.pause = function (animatables) {
        return this.add(animatables, false);
    };
    /**
     * Set time of named animations
     * @param animations names of the animations to scrub
     * @param value time scrub value, a floating point number to which the playhead is jumped
     * @returns a list of names of the animations that were scrubbed
     */
    Animator.prototype.scrub = function (animatables, value) {
        var forScrubbing = this.animations.filter(function (a) { return animatables.includes(a.name); });
        forScrubbing.forEach(function (a) { return a.scrubTo = value; });
        return forScrubbing.map(function (a) { return a.name; });
    };
    Object.defineProperty(Animator.prototype, "playing", {
        /**
         * Returns a list of names of all animations and state machines currently
         * playing
         */
        get: function () {
            return this.animations.filter(function (a) { return a.playing; }).map(function (a) { return a.name; }).concat(this.stateMachines.filter(function (m) { return m.playing; }).map(function (m) { return m.name; }));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animator.prototype, "paused", {
        /**
         * Returns a list of names of all animations and state machines currently
         * paused
         */
        get: function () {
            return this.animations.filter(function (a) { return !a.playing; }).map(function (a) { return a.name; }).concat(this.stateMachines.filter(function (m) { return !m.playing; }).map(function (m) { return m.name; }));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Stops and removes all named animations and state machines
     * @param animatables animations and state machines to remove
     * @returns a list of names of removed items
     */
    Animator.prototype.stop = function (animatables) {
        var _this = this;
        animatables = mapToStringArray(animatables);
        // If nothing's specified, wipe them out, all of them
        var removedNames = [];
        // Stop everything
        if (animatables.length === 0) {
            removedNames = this.animations.map(function (a) { return a.name; }).concat(this.stateMachines.map(function (m) { return m.name; }));
            // Clean up before emptying the arrays
            this.animations.forEach(function (a) { return a.cleanup(); });
            this.stateMachines.forEach(function (m) { return m.cleanup(); });
            // Empty out the arrays
            this.animations.splice(0, this.animations.length);
            this.stateMachines.splice(0, this.stateMachines.length);
        }
        else {
            // Remove only the named animations/state machines
            var animationsToRemove = this.animations.filter(function (a) { return animatables.includes(a.name); });
            animationsToRemove.forEach(function (a) {
                a.cleanup();
                _this.animations.splice(_this.animations.indexOf(a), 1);
            });
            var machinesToRemove = this.stateMachines.filter(function (m) { return animatables.includes(m.name); });
            machinesToRemove.forEach(function (m) {
                m.cleanup();
                _this.stateMachines.splice(_this.stateMachines.indexOf(m), 1);
            });
            removedNames = animationsToRemove.map(function (a) { return a.name; }).concat(machinesToRemove.map(function (m) { return m.name; }));
        }
        this.eventManager.fire({
            type: EventType.Stop,
            data: removedNames,
        });
        // Return the list of animations removed
        return removedNames;
    };
    Object.defineProperty(Animator.prototype, "isPlaying", {
        /**
         * Returns true if at least one animation is active
         */
        get: function () {
            return this.animations.reduce(function (acc, curr) { return acc || curr.playing; }, false)
                || this.stateMachines.reduce(function (acc, curr) { return acc || curr.playing; }, false);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animator.prototype, "isPaused", {
        /**
         * Returns true if all animations are paused and there's at least one animation
         */
        get: function () {
            return !this.isPlaying &&
                (this.animations.length > 0 || this.stateMachines.length > 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animator.prototype, "isStopped", {
        /**
         * Returns true if there are no playing or paused animations/state machines
         */
        get: function () {
            return this.animations.length === 0 && this.stateMachines.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * If there are no animations or state machines, add the first one found
     * @returns the name of the animation or state machine instanced
     */
    Animator.prototype.atLeastOne = function (playing, fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        var instancedName;
        if (this.animations.length === 0 && this.stateMachines.length === 0) {
            if (this.artboard.animationCount() > 0) {
                // Add the first animation
                this.add([instancedName = this.artboard.animationByIndex(0).name], playing, fireEvent);
            }
            else if (this.artboard.stateMachineCount() > 0) {
                // Add the first state machine
                this.add([instancedName = this.artboard.stateMachineByIndex(0).name], playing, fireEvent);
            }
        }
        return instancedName;
    };
    /**
     * Checks if any animations have looped and if so, fire the appropriate event
     */
    Animator.prototype.handleLooping = function () {
        for (var _i = 0, _a = this.animations.filter(function (a) { return a.playing; }); _i < _a.length; _i++) {
            var animation = _a[_i];
            // Emit if the animation looped
            if (animation.loopValue === 0 && animation.loopCount) {
                animation.loopCount = 0;
                // This is a one-shot; if it has ended, delete the instance
                this.stop(animation.name);
            }
            else if (animation.loopValue === 1 && animation.loopCount) {
                this.eventManager.fire({
                    type: EventType.Loop,
                    data: { animation: animation.name, type: LoopType.Loop }
                });
                animation.loopCount = 0;
            }
            // Wasm indicates a loop at each time the animation
            // changes direction, so a full loop/lap occurs every
            // two loop counts
            else if (animation.loopValue === 2 && animation.loopCount > 1) {
                this.eventManager.fire({
                    type: EventType.Loop,
                    data: { animation: animation.name, type: LoopType.PingPong }
                });
                animation.loopCount = 0;
            }
        }
    };
    /**
     * Checks if states have changed in state machines and fires a statechange
     * event
     */
    Animator.prototype.handleStateChanges = function () {
        var statesChanged = [];
        for (var _i = 0, _a = this.stateMachines.filter(function (sm) { return sm.playing; }); _i < _a.length; _i++) {
            var stateMachine = _a[_i];
            statesChanged.push.apply(statesChanged, stateMachine.statesChanged);
        }
        if (statesChanged.length > 0) {
            this.eventManager.fire({
                type: EventType.StateChange,
                data: statesChanged,
            });
        }
    };
    return Animator;
}());
// #endregion
// #region events
/**
 * Supported event types triggered in Rive
 */
var EventType;
(function (EventType) {
    EventType["Load"] = "load";
    EventType["LoadError"] = "loaderror";
    EventType["Play"] = "play";
    EventType["Pause"] = "pause";
    EventType["Stop"] = "stop";
    EventType["Loop"] = "loop";
    EventType["Draw"] = "draw";
    EventType["StateChange"] = "statechange";
})(EventType || (EventType = {}));
/**
 * Looping types: one-shot, loop, and ping-pong
 */
var LoopType;
(function (LoopType) {
    LoopType["OneShot"] = "oneshot";
    LoopType["Loop"] = "loop";
    LoopType["PingPong"] = "pingpong"; // has value 2 in runtime
})(LoopType || (LoopType = {}));
// Manages Rive events and listeners
var EventManager = /** @class */ (function () {
    function EventManager(listeners) {
        if (listeners === void 0) { listeners = []; }
        this.listeners = listeners;
    }
    // Gets listeners of specified type
    EventManager.prototype.getListeners = function (type) {
        return this.listeners.filter(function (e) { return e.type === type; });
    };
    // Adds a listener
    EventManager.prototype.add = function (listener) {
        if (!this.listeners.includes(listener)) {
            this.listeners.push(listener);
        }
    };
    /**
     * Removes a listener
     * @param listener the listener with the callback to be removed
     */
    EventManager.prototype.remove = function (listener) {
        // We can't simply look for the listener as it'll be a different instance to
        // one originally subscribed. Find all the listeners of the right type and
        // then check their callbacks which should match.
        for (var i = 0; i < this.listeners.length; i++) {
            var currentListener = this.listeners[i];
            if (currentListener.type === listener.type) {
                if (currentListener.callback === listener.callback) {
                    this.listeners.splice(i, 1);
                    break;
                }
            }
        }
    };
    /**
     * Clears all listeners of specified type, or every listener if no type is
     * specified
     * @param type the type of listeners to clear, or all listeners if not
     * specified
     */
    EventManager.prototype.removeAll = function (type) {
        var _this = this;
        if (!type) {
            this.listeners.splice(0, this.listeners.length);
        }
        else {
            this.listeners
                .filter(function (l) { return l.type === type; })
                .forEach(function (l) { return _this.remove(l); });
        }
    };
    // Fires an event
    EventManager.prototype.fire = function (event) {
        var eventListeners = this.getListeners(event.type);
        eventListeners.forEach(function (listener) { return listener.callback(event); });
    };
    return EventManager;
}());
// Manages a queue of tasks
var TaskQueueManager = /** @class */ (function () {
    function TaskQueueManager(eventManager) {
        this.eventManager = eventManager;
        this.queue = [];
    }
    // Adds a task top the queue
    TaskQueueManager.prototype.add = function (task) {
        this.queue.push(task);
    };
    // Processes all tasks in the queue
    TaskQueueManager.prototype.process = function () {
        while (this.queue.length > 0) {
            var task = this.queue.shift();
            task === null || task === void 0 ? void 0 : task.action();
            if (task === null || task === void 0 ? void 0 : task.event) {
                this.eventManager.fire(task.event);
            }
        }
    };
    return TaskQueueManager;
}());
var Rive = /** @class */ (function () {
    function Rive(params) {
        var _a;
        // Flag to indicate if the layout has changed; used by the renderer to know
        // when to align
        this._updateLayout = true;
        /**
         * Flag to active/deactivate renderer
         */
        this.isRendererActive = true;
        // Tracks if a Rive file is loaded
        this.loaded = false;
        /**
         * Tracks if a Rive file is loaded; we need this in addition to loaded as some
         * commands (e.g. contents) can be called as soon as the file is loaded.
         * However, playback commands need to be queued and run in order once initial
         * animations and autoplay has been sorted out. This applies to play, pause,
         * and start.
         */
        this.readyForPlaying = false;
        // Runtime artboard
        this.artboard = null;
        // Durations to generate a frame for the last second. Used for performance profiling.
        this.durations = [];
        this.frameTimes = [];
        this.frameCount = 0;
        /**
         * Used be draw to track when a second of active rendering time has passed. Used for debugging purposes
         */
        this.renderSecondTimer = 0;
        this.canvas = params.canvas;
        this.src = params.src;
        this.buffer = params.buffer;
        this.layout = (_a = params.layout) !== null && _a !== void 0 ? _a : new Layout();
        // New event management system
        this.eventManager = new EventManager();
        if (params.onLoad)
            this.on(EventType.Load, params.onLoad);
        if (params.onLoadError)
            this.on(EventType.LoadError, params.onLoadError);
        if (params.onPlay)
            this.on(EventType.Play, params.onPlay);
        if (params.onPause)
            this.on(EventType.Pause, params.onPause);
        if (params.onStop)
            this.on(EventType.Stop, params.onStop);
        if (params.onLoop)
            this.on(EventType.Loop, params.onLoop);
        if (params.onStateChange)
            this.on(EventType.StateChange, params.onStateChange);
        /**
         * @deprecated Use camelCase'd versions instead.
         */
        if (params.onload && !params.onLoad)
            this.on(EventType.Load, params.onload);
        if (params.onloaderror && !params.onLoadError)
            this.on(EventType.LoadError, params.onloaderror);
        if (params.onplay && !params.onPlay)
            this.on(EventType.Play, params.onplay);
        if (params.onpause && !params.onPause)
            this.on(EventType.Pause, params.onpause);
        if (params.onstop && !params.onStop)
            this.on(EventType.Stop, params.onstop);
        if (params.onloop && !params.onLoop)
            this.on(EventType.Loop, params.onloop);
        if (params.onstatechange && !params.onStateChange)
            this.on(EventType.StateChange, params.onstatechange);
        // Hook up the task queue
        this.taskQueue = new TaskQueueManager(this.eventManager);
        this.init({
            src: this.src,
            buffer: this.buffer,
            autoplay: params.autoplay,
            animations: params.animations,
            stateMachines: params.stateMachines,
            artboard: params.artboard,
            useOffscreenRenderer: params.useOffscreenRenderer,
        });
    }
    // Alternative constructor to build a Rive instance from an interface/object
    Rive.new = function (params) {
        console.warn('This function is deprecated: please use `new Rive({})` instead');
        return new Rive(params);
    };
    // Initializes the Rive object either from constructor or load()
    Rive.prototype.init = function (_a) {
        var _this = this;
        var src = _a.src, buffer = _a.buffer, animations = _a.animations, stateMachines = _a.stateMachines, artboard = _a.artboard, _b = _a.autoplay, autoplay = _b === void 0 ? false : _b, _c = _a.useOffscreenRenderer, useOffscreenRenderer = _c === void 0 ? false : _c;
        this.src = src;
        this.buffer = buffer;
        // If no source file url specified, it's a bust
        if (!this.src && !this.buffer) {
            throw new Error(Rive.missingErrorMessage);
        }
        // List of animations that should be initialized.
        var startingAnimationNames = mapToStringArray(animations);
        // List of state machines that should be initialized
        var startingStateMachineNames = mapToStringArray(stateMachines);
        // Ensure loaded is marked as false if loading new file
        this.loaded = false;
        this.readyForPlaying = false;
        // Ensure the runtime is loaded
        RuntimeLoader.awaitInstance().then(function (runtime) {
            _this.runtime = runtime;
            // Get the canvas where you want to render the animation and create a renderer
            _this.renderer = _this.runtime.makeRenderer(_this.canvas, useOffscreenRenderer);
            // Initial size adjustment based on devicePixelRatio if no width/height are specified explicitly
            if (!(_this.canvas.width || _this.canvas.height)) {
                _this.resizeDrawingSurfaceToCanvas();
            }
            // Load Rive data from a source uri or a data buffer
            _this.initData(artboard, startingAnimationNames, startingStateMachineNames, autoplay).catch(function (e) {
                console.error(e);
            });
        }).catch(function (e) {
            console.error(e);
        });
    };
    // Initializes runtime with Rive data and preps for playing
    Rive.prototype.initData = function (artboardName, animationNames, stateMachineNames, autoplay) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, msg;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this.src) return [3 /*break*/, 2];
                        _b = this;
                        return [4 /*yield*/, loadRiveFile(this.src)];
                    case 1:
                        _b.buffer = _d.sent();
                        _d.label = 2;
                    case 2:
                        // Load the Rive file
                        _c = this;
                        return [4 /*yield*/, this.runtime.load(new Uint8Array(this.buffer))];
                    case 3:
                        // Load the Rive file
                        _c.file = _d.sent();
                        if (this.file) {
                            // Initialize and draw frame
                            this.initArtboard(artboardName, animationNames, stateMachineNames, autoplay);
                            // Everything's set up, emit a load event
                            this.loaded = true;
                            this.eventManager.fire({
                                type: EventType.Load,
                                data: (_a = this.src) !== null && _a !== void 0 ? _a : 'buffer'
                            });
                            // Flag ready for playback commands and clear the task queue; this order
                            // is important or it may infinitely recurse
                            this.readyForPlaying = true;
                            this.taskQueue.process();
                            this.drawFrame();
                            return [2 /*return*/, Promise.resolve()];
                        }
                        else {
                            msg = 'Problem loading file; may be corrupt!';
                            console.warn(msg);
                            this.eventManager.fire({ type: EventType.LoadError, data: msg });
                            return [2 /*return*/, Promise.reject(msg)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    // Initialize for playback
    Rive.prototype.initArtboard = function (artboardName, animationNames, stateMachineNames, autoplay) {
        // Fetch the artboard
        var rootArtboard = artboardName ?
            this.file.artboardByName(artboardName) :
            this.file.defaultArtboard();
        // Check we have a working artboard
        if (!rootArtboard) {
            var msg = 'Invalid artboard name or no default artboard';
            console.warn(msg);
            this.eventManager.fire({ type: EventType.LoadError, data: msg });
            return;
        }
        // Instance the artboard
        this.artboard = rootArtboard.instance();
        // Check that the artboard has at least 1 animation
        if (this.artboard.animationCount() < 1) {
            var msg = 'Artboard has no animations';
            this.eventManager.fire({ type: EventType.LoadError, data: msg });
            throw msg;
        }
        // Initialize the animator
        this.animator = new Animator(this.runtime, this.artboard, this.eventManager);
        // Initialize the animations; as loaded hasn't happened yet, we need to
        // suppress firing the play/pause events until the load event has fired. To
        // do this we tell the animator to suppress firing events, and add event
        // firing to the task queue.
        var instanceNames;
        if (animationNames.length > 0 || stateMachineNames.length > 0) {
            instanceNames = animationNames.concat(stateMachineNames);
            this.animator.add(instanceNames, autoplay, false);
        }
        else {
            instanceNames = [this.animator.atLeastOne(autoplay, false)];
        }
        // Queue up firing the playback events
        this.taskQueue.add({
            action: function () { },
            event: {
                type: autoplay ? EventType.Play : EventType.Pause,
                data: instanceNames,
            }
        });
    };
    // Draws the current artboard frame
    Rive.prototype.drawFrame = function () {
        this.startRendering();
    };
    /**
     * Draw rendering loop; renders animation frames at the correct time interval.
     * @param time the time at which to render a frame
     */
    Rive.prototype.draw = function (time, onSecond) {
        var before = performance.now();
        // Clear the frameRequestId, as we're now rendering a fresh frame
        this.frameRequestId = null;
        // On the first pass, make sure lastTime has a valid value
        if (!this.lastRenderTime) {
            this.lastRenderTime = time;
        }
        // Handle the onSecond callback
        this.renderSecondTimer += (time - this.lastRenderTime);
        if (this.renderSecondTimer > 5000) {
            this.renderSecondTimer = 0;
            onSecond === null || onSecond === void 0 ? void 0 : onSecond();
        }
        // Calculate the elapsed time between frames in seconds
        var elapsedTime = (time - this.lastRenderTime) / 1000;
        this.lastRenderTime = time;
        // Advance non-paused animations by the elapsed number of seconds
        // Also advance any animations that require scrubbing
        var activeAnimations = this.animator.animations.filter(function (a) { return a.playing || a.needsScrub; })
            // The scrubbed animations must be applied first to prevent weird artifacts
            // if the playing animations conflict with the scrubbed animating attribuates.
            .sort(function (first, second) { return first.needsScrub ? -1 : 1; });
        for (var _i = 0, activeAnimations_1 = activeAnimations; _i < activeAnimations_1.length; _i++) {
            var animation = activeAnimations_1[_i];
            animation.advance(elapsedTime);
            if (animation.instance.didLoop) {
                animation.loopCount += 1;
            }
            animation.instance.apply(1.0);
        }
        // Advance non-paused state machines by the elapsed number of seconds
        var activeStateMachines = this.animator.stateMachines.filter(function (a) { return a.playing; });
        for (var _a = 0, activeStateMachines_1 = activeStateMachines; _a < activeStateMachines_1.length; _a++) {
            var stateMachine = activeStateMachines_1[_a];
            stateMachine.instance.advance(elapsedTime);
            // stateMachine.instance.apply(this.artboard);
        }
        // Once the animations have been applied to the artboard, advance it
        // by the elapsed time.
        this.artboard.advance(elapsedTime);
        var renderer = this.renderer;
        // Canvas must be wiped to prevent artifacts
        renderer.clear();
        renderer.save();
        // Update the renderer alignment if necessary
        this.alignRenderer();
        this.artboard.draw(renderer);
        renderer.restore();
        renderer.flush();
        // Check for any animations that looped
        this.animator.handleLooping();
        // Check for any state machines that had a state change
        this.animator.handleStateChanges();
        // Add duration to create frame to durations array
        this.frameCount++;
        var after = performance.now();
        this.frameTimes.push(after);
        this.durations.push(after - before);
        while (this.frameTimes[0] <= after - 1000) {
            this.frameTimes.shift();
            this.durations.shift();
        }
        // Calling requestAnimationFrame will rerun draw() at the correct rate:
        // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations
        if (this.animator.isPlaying) {
            // Request a new rendering frame
            this.startRendering();
        }
        else if (this.animator.isPaused) {
            // Reset the end time so on playback it starts at the correct frame
            this.lastRenderTime = 0;
        }
        else if (this.animator.isStopped) {
            // Reset animation instances, artboard and time
            // TODO: implement this properly when we have instancing
            // this.initArtboard();
            // this.drawFrame();
            this.lastRenderTime = 0;
        }
    };
    /**
     * Align the renderer
     */
    Rive.prototype.alignRenderer = function () {
        var _a = this, renderer = _a.renderer, runtime = _a.runtime, _layout = _a._layout, artboard = _a.artboard;
        // Align things up safe in the knowledge we can restore if changed
        renderer.align(_layout.runtimeFit(runtime), _layout.runtimeAlignment(runtime), {
            minX: _layout.minX,
            minY: _layout.minY,
            maxX: _layout.maxX,
            maxY: _layout.maxY
        }, artboard.bounds);
    };
    Object.defineProperty(Rive.prototype, "fps", {
        get: function () {
            return this.durations.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "frameTime", {
        get: function () {
            if (this.durations.length === 0) {
                return 0;
            }
            return (this.durations.reduce(function (a, b) { return a + b; }, 0) / this.durations.length).toFixed(4);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Cleans up any Wasm-generated objects that need to be manually destroyed:
     * artboard instances, animation instances, state machine instances.
     *
     * Once this is called, things will need to be reinitialized or bad things
     * might happen.
     */
    Rive.prototype.cleanup = function () {
        this.artboard.delete();
        // TODO: delete animation and state machine instances
    };
    // Plays specified animations; if none specified, it unpauses everything.
    Rive.prototype.play = function (animationNames, autoplay) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, queue up the play
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.play(animationNames, autoplay); },
            });
            return;
        }
        this.animator.play(animationNames);
        this.startRendering();
    };
    // Pauses specified animations; if none specified, pauses all.
    Rive.prototype.pause = function (animationNames) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, early out, nothing to pause
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.pause(animationNames); },
            });
            return;
        }
        this.animator.pause(animationNames);
    };
    Rive.prototype.scrub = function (animationNames, value) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, early out, nothing to pause
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.scrub(animationNames, value); },
            });
            return;
        }
        // Scrub the animation time; we draw a single frame here so that if
        // nothing's currently playing, the scrubbed animation is still rendered/
        this.animator.scrub(animationNames, value || 0);
        this.drawFrame();
    };
    // Stops specified animations; if none specifies, stops them all.
    Rive.prototype.stop = function (animationNames) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, early out, nothing to pause
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.stop(animationNames); },
            });
            return;
        }
        this.animator.stop(animationNames);
    };
    /**
     * Resets the animation
     * @param artboard the name of the artboard, or default if none given
     * @param animations the names of animations for playback
     * @param stateMachines the names of state machines for playback
     * @param autoplay whether to autoplay when reset, defaults to false
     *
     */
    Rive.prototype.reset = function (params) {
        var _a;
        // Get the current artboard, animations, state machines, and playback states
        var artBoardName = params === null || params === void 0 ? void 0 : params.artboard;
        var animationNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.animations);
        var stateMachineNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.stateMachines);
        var autoplay = (_a = params === null || params === void 0 ? void 0 : params.autoplay) !== null && _a !== void 0 ? _a : false;
        // Stop everything and clean up
        this.stop();
        this.cleanup();
        // Reinitialize an artboard instance with the state
        this.initArtboard(artBoardName, animationNames, stateMachineNames, autoplay);
    };
    // Loads a new Rive file, keeping listeners in place
    Rive.prototype.load = function (params) {
        // Stop all animations
        this.stop();
        // Reinitialize
        this.init(params);
    };
    Object.defineProperty(Rive.prototype, "layout", {
        /**
         * Returns the current layout. Note that layout should be treated as
         * immutable. If you want to change the layout, create a new one use the
         * layout setter
         */
        get: function () {
            return this._layout;
        },
        // Sets a new layout
        set: function (layout) {
            this._layout = layout;
            // If the maxX or maxY are 0, then set them to the canvas width and height
            if (!layout.maxX || !layout.maxY) {
                this.resizeToCanvas();
            }
            if (this.loaded && !this.animator.isPlaying) {
                this.drawFrame();
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the layout bounds to the current canvas size; this is typically called
     * when the canvas is resized
     */
    Rive.prototype.resizeToCanvas = function () {
        this._layout = this.layout.copyWith({
            minX: 0,
            minY: 0,
            maxX: this.canvas.width,
            maxY: this.canvas.height
        });
    };
    /**
     * Accounts for devicePixelRatio as a multiplier to render the size of the canvas drawing surface.
     * Uses the size of the backing canvas to set new width/height attributes. Need to re-render
     * and resize the layout to match the new drawing surface afterwards. Useful function for consumers
     * to include in a window resize listener
     */
    Rive.prototype.resizeDrawingSurfaceToCanvas = function () {
        if (this.canvas instanceof HTMLCanvasElement && !!window) {
            var _a = this.canvas.getBoundingClientRect(), width = _a.width, height = _a.height;
            var dpr = window.devicePixelRatio || 1;
            this.canvas.width = dpr * width;
            this.canvas.height = dpr * height;
            this.startRendering();
            this.resizeToCanvas();
        }
    };
    Object.defineProperty(Rive.prototype, "source", {
        // Returns the animation source, which may be undefined
        get: function () {
            return this.src;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "activeArtboard", {
        /**
         * Returns the name of the active artboard
         */
        get: function () {
            return this.artboard.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "animationNames", {
        // Returns a list of animation names on the chosen artboard
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            var animationNames = [];
            for (var i = 0; i < this.artboard.animationCount(); i++) {
                animationNames.push(this.artboard.animationByIndex(i).name);
            }
            return animationNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "stateMachineNames", {
        /**
         * Returns a list of state machine names from the current artboard
         */
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            var stateMachineNames = [];
            for (var i = 0; i < this.artboard.stateMachineCount(); i++) {
                stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);
            }
            return stateMachineNames;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the inputs for the specified instanced state machine, or an empty
     * list if the name is invalid or the state machine is not instanced
     * @param name the state machine name
     * @returns the inputs for the named state machine
     */
    Rive.prototype.stateMachineInputs = function (name) {
        // If the file's not loaded, early out, nothing to pause
        if (!this.loaded) {
            return;
        }
        var stateMachine = this.animator.stateMachines.find(function (m) { return m.name === name; });
        return stateMachine === null || stateMachine === void 0 ? void 0 : stateMachine.inputs;
    };
    Object.defineProperty(Rive.prototype, "playingStateMachineNames", {
        // Returns a list of playing machine names
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.stateMachines
                .filter(function (m) { return m.playing; })
                .map(function (m) { return m.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "playingAnimationNames", {
        // Returns a list of playing animation names
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.animations
                .filter(function (a) { return a.playing; })
                .map(function (a) { return a.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "pausedAnimationNames", {
        // Returns a list of paused animation names
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.animations
                .filter(function (a) { return !a.playing; })
                .map(function (a) { return a.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "pausedStateMachineNames", {
        /**
         *  Returns a list of paused machine names
         * @returns a list of state machine names that are paused
         */
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.stateMachines
                .filter(function (m) { return !m.playing; })
                .map(function (m) { return m.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "isPlaying", {
        /**
         * @returns true if any animation is playing
         */
        get: function () {
            return this.animator.isPlaying;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "isPaused", {
        /**
         * @returns true if all instanced animations are paused
         */
        get: function () {
            return this.animator.isPaused;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "isStopped", {
        /**
         * @returns true if no animations are playing or paused
         */
        get: function () {
            return this.animator.isStopped;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "bounds", {
        /**
         * @returns the bounds of the current artboard, or undefined if the artboard
         * isn't loaded yet.
         */
        get: function () {
            return this.artboard ? this.artboard.bounds : undefined;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Subscribe to Rive-generated events
     * @param type the type of event to subscribe to
     * @param callback callback to fire when the event occurs
     */
    Rive.prototype.on = function (type, callback) {
        this.eventManager.add({
            type: type,
            callback: callback,
        });
    };
    /**
     * Unsubscribes from a Rive-generated event
     * @param callback the callback to unsubscribe from
     */
    Rive.prototype.unsubscribe = function (type, callback) {
        this.eventManager.remove({
            type: type,
            callback: callback,
        });
    };
    /**
     * Unsubscribes all listeners from an event type, or everything if no type is
     * given
     * @param type the type of event to unsubscribe from, or all types if
     * undefined
     */
    Rive.prototype.unsubscribeAll = function (type) {
        this.eventManager.removeAll(type);
    };
    /**
     * Stops the rendering loop; this is different from pausing in that it doesn't
     * change the state of any animation. It stops rendering from occurring. This
     * is designed for situations such as when Rive isn't visible.
     *
     * The only way to start rendering again is to call `startRendering`.
     * Animations that are marked as playing will start from the position that
     * they would have been at if rendering had not been stopped.
     */
    Rive.prototype.stopRendering = function () {
        if (this.loaded && this.frameRequestId) {
            if (this.runtime.cancelAnimationFrame) {
                this.runtime.cancelAnimationFrame(this.frameRequestId);
            }
            else {
                cancelAnimationFrame(this.frameRequestId);
            }
            this.frameRequestId = null;
        }
    };
    /**
     * Starts the rendering loop if it has been previously stopped. If the
     * renderer is already active, then this will have zero effect.
     */
    Rive.prototype.startRendering = function () {
        if (this.loaded && !this.frameRequestId) {
            if (this.runtime.requestAnimationFrame) {
                this.frameRequestId = this.runtime.requestAnimationFrame(this.draw.bind(this));
            }
            else {
                this.frameRequestId = requestAnimationFrame(this.draw.bind(this));
            }
        }
    };
    Object.defineProperty(Rive.prototype, "contents", {
        /**
         * Returns the contents of a Rive file: the artboards, animations, and state machines
         */
        get: function () {
            if (!this.loaded) {
                return undefined;
            }
            var riveContents = {
                artboards: [],
            };
            for (var i = 0; i < this.file.artboardCount(); i++) {
                var artboard = this.file.artboardByIndex(i);
                var artboardContents = {
                    name: artboard.name,
                    animations: [],
                    stateMachines: [],
                };
                for (var j = 0; j < artboard.animationCount(); j++) {
                    var animation = artboard.animationByIndex(j);
                    artboardContents.animations.push(animation.name);
                }
                for (var k = 0; k < artboard.stateMachineCount(); k++) {
                    var stateMachine = artboard.stateMachineByIndex(k);
                    var name_1 = stateMachine.name;
                    var instance = new this.runtime.StateMachineInstance(stateMachine, artboard);
                    var inputContents = [];
                    for (var l = 0; l < instance.inputCount(); l++) {
                        var input = instance.input(l);
                        inputContents.push({ name: input.name, type: input.type });
                    }
                    artboardContents.stateMachines.push({ name: name_1, inputs: inputContents });
                }
                riveContents.artboards.push(artboardContents);
            }
            return riveContents;
        },
        enumerable: false,
        configurable: true
    });
    // Error message for missing source or buffer
    Rive.missingErrorMessage = 'Rive source file or data buffer required';
    return Rive;
}());

// Loads Rive data from a URI via fetch.
var loadRiveFile = function (src) { return __awaiter(void 0, void 0, void 0, function () {
    var req, res, buffer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                req = new Request(src);
                return [4 /*yield*/, fetch(req)];
            case 1:
                res = _a.sent();
                return [4 /*yield*/, res.arrayBuffer()];
            case 2:
                buffer = _a.sent();
                return [2 /*return*/, buffer];
        }
    });
}); };
// #endregion
// #region utility functions
/*
 * Utility function to ensure an object is a string array
 */
var mapToStringArray = function (obj) {
    if (typeof obj === 'string') {
        return [obj];
    }
    else if (obj instanceof Array) {
        return obj;
    }
    // If obj is undefined, return empty array
    return [];
};
// #endregion
// #region testing utilities
// Exports to only be used for tests
var Testing = {
    EventManager: EventManager,
    TaskQueueManager: TaskQueueManager,
};
// #endregion

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=rive.js.map